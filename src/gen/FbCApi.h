/* This file was autogenerated by cloop - Cross Language Object Oriented Programming */

#ifndef FB_C_API_H
#define FB_C_API_H

#include <stdint.h>

#ifndef CLOOP_EXTERN_C
#ifdef __cplusplus
#define CLOOP_EXTERN_C extern "C"
#else
#define CLOOP_EXTERN_C
#endif
#endif


struct Versioned;
struct ReferenceCounted;
struct Disposable;
struct Status;
struct Master;
struct PluginBase;
struct PluginSet;
struct ConfigEntry;
struct Config;
struct FirebirdConf;
struct PluginConfig;
struct PluginFactory;
struct PluginModule;
struct PluginManager;
struct CryptKey;
struct ConfigManager;
struct EventCallback;
struct Blob;
struct Transaction;
struct MessageMetadata;
struct MetadataBuilder;
struct ResultSet;
struct Statement;
struct Request;
struct Events;
struct Attachment;
struct Service;
struct Provider;
struct DtcStart;
struct Dtc;
struct Auth;
struct Writer;
struct ServerBlock;
struct ClientBlock;
struct Server;
struct Client;
struct UserField;
struct CharUserField;
struct IntUserField;
struct User;
struct ListUsers;
struct LogonInfo;
struct Management;
struct WireCryptPlugin;
struct CryptKeyCallback;
struct KeyHolderPlugin;
struct DbCryptPlugin;
struct ExternalContext;
struct ExternalResultSet;
struct ExternalFunction;
struct ExternalProcedure;
struct ExternalTrigger;
struct RoutineMetadata;
struct ExternalEngine;
struct Timer;
struct TimerControl;
struct VersionCallback;
struct Util;
struct TraceConnection;
struct TraceDatabaseConnection;
struct TraceTransaction;
struct TraceParams;
struct TraceStatement;
struct TraceSQLStatement;
struct TraceBLRStatement;
struct TraceDYNRequest;
struct TraceContextVariable;
struct TraceProcedure;
struct TraceFunction;
struct TraceTrigger;
struct TraceServiceConnection;
struct TraceStatusVector;
struct TraceSweepInfo;
struct TraceLogWriter;
struct TraceInitInfo;
struct TracePlugin;
struct TraceFactory;
struct UdrFunctionFactory;
struct UdrProcedureFactory;
struct UdrTriggerFactory;
struct UdrPlugin;


#define Versioned_VERSION 0

struct Versioned;

struct VersionedVTable
{
	void* cloopDummy[1];
	uintptr_t version;
};

struct Versioned
{
	void* cloopDummy[1];
	struct VersionedVTable* vtable;
};


#define ReferenceCounted_VERSION 2

struct ReferenceCounted;

struct ReferenceCountedVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct ReferenceCounted* self);
	int (*release)(struct ReferenceCounted* self);
};

struct ReferenceCounted
{
	void* cloopDummy[1];
	struct ReferenceCountedVTable* vtable;
};

CLOOP_EXTERN_C void ReferenceCounted_addRef(struct ReferenceCounted* self);
CLOOP_EXTERN_C int ReferenceCounted_release(struct ReferenceCounted* self);

#define Disposable_VERSION 1

struct Disposable;

struct DisposableVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct Disposable* self);
};

struct Disposable
{
	void* cloopDummy[1];
	struct DisposableVTable* vtable;
};

CLOOP_EXTERN_C void Disposable_dispose(struct Disposable* self);

#define Status_VERSION 10

#define Status_STATE_WARNINGS ((unsigned) (1))
#define Status_STATE_ERRORS ((unsigned) (2))
#define Status_RESULT_ERROR ((int) (-1))
#define Status_RESULT_OK ((int) (0))
#define Status_RESULT_NO_DATA ((int) (1))
#define Status_RESULT_SEGMENT ((int) (2))

struct Status;

struct StatusVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct Status* self);
	void (*init)(struct Status* self);
	unsigned (*getState)(const struct Status* self);
	void (*setErrors2)(struct Status* self, unsigned length, const intptr_t* value);
	void (*setWarnings2)(struct Status* self, unsigned length, const intptr_t* value);
	void (*setErrors)(struct Status* self, const intptr_t* value);
	void (*setWarnings)(struct Status* self, const intptr_t* value);
	const intptr_t* (*getErrors)(const struct Status* self);
	const intptr_t* (*getWarnings)(const struct Status* self);
	struct Status* (*clone)(const struct Status* self);
};

struct Status
{
	void* cloopDummy[1];
	struct StatusVTable* vtable;
};

CLOOP_EXTERN_C void Status_dispose(struct Status* self);
CLOOP_EXTERN_C void Status_init(struct Status* self);
CLOOP_EXTERN_C unsigned Status_getState(const struct Status* self);
CLOOP_EXTERN_C void Status_setErrors2(struct Status* self, unsigned length, const intptr_t* value);
CLOOP_EXTERN_C void Status_setWarnings2(struct Status* self, unsigned length, const intptr_t* value);
CLOOP_EXTERN_C void Status_setErrors(struct Status* self, const intptr_t* value);
CLOOP_EXTERN_C void Status_setWarnings(struct Status* self, const intptr_t* value);
CLOOP_EXTERN_C const intptr_t* Status_getErrors(const struct Status* self);
CLOOP_EXTERN_C const intptr_t* Status_getWarnings(const struct Status* self);
CLOOP_EXTERN_C struct Status* Status_clone(const struct Status* self);

#define Master_VERSION 12

struct Master;

struct MasterVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	struct Status* (*getStatus)(struct Master* self);
	struct Provider* (*getDispatcher)(struct Master* self);
	struct PluginManager* (*getPluginManager)(struct Master* self);
	const char* (*circularAlloc)(struct Master* self, const char* s, unsigned len, intptr_t thr);
	struct TimerControl* (*getTimerControl)(struct Master* self);
	struct Dtc* (*getDtc)(struct Master* self);
	struct Attachment* (*registerAttachment)(struct Master* self, struct Provider* provider, struct Attachment* attachment);
	struct Transaction* (*registerTransaction)(struct Master* self, struct Attachment* attachment, struct Transaction* transaction);
	struct MetadataBuilder* (*getMetadataBuilder)(struct Master* self, struct Status* status, unsigned fieldCount);
	int (*serverMode)(struct Master* self, int mode);
	struct Util* (*getUtilInterface)(struct Master* self);
	struct ConfigManager* (*getConfigManager)(struct Master* self);
};

struct Master
{
	void* cloopDummy[1];
	struct MasterVTable* vtable;
};

CLOOP_EXTERN_C struct Status* Master_getStatus(struct Master* self);
CLOOP_EXTERN_C struct Provider* Master_getDispatcher(struct Master* self);
CLOOP_EXTERN_C struct PluginManager* Master_getPluginManager(struct Master* self);
CLOOP_EXTERN_C const char* Master_circularAlloc(struct Master* self, const char* s, unsigned len, intptr_t thr);
CLOOP_EXTERN_C struct TimerControl* Master_getTimerControl(struct Master* self);
CLOOP_EXTERN_C struct Dtc* Master_getDtc(struct Master* self);
CLOOP_EXTERN_C struct Attachment* Master_registerAttachment(struct Master* self, struct Provider* provider, struct Attachment* attachment);
CLOOP_EXTERN_C struct Transaction* Master_registerTransaction(struct Master* self, struct Attachment* attachment, struct Transaction* transaction);
CLOOP_EXTERN_C struct MetadataBuilder* Master_getMetadataBuilder(struct Master* self, struct Status* status, unsigned fieldCount);
CLOOP_EXTERN_C int Master_serverMode(struct Master* self, int mode);
CLOOP_EXTERN_C struct Util* Master_getUtilInterface(struct Master* self);
CLOOP_EXTERN_C struct ConfigManager* Master_getConfigManager(struct Master* self);

#define PluginBase_VERSION 4

struct PluginBase;

struct PluginBaseVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct PluginBase* self);
	int (*release)(struct PluginBase* self);
	void (*setOwner)(struct PluginBase* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct PluginBase* self);
};

struct PluginBase
{
	void* cloopDummy[1];
	struct PluginBaseVTable* vtable;
};

CLOOP_EXTERN_C void PluginBase_addRef(struct PluginBase* self);
CLOOP_EXTERN_C int PluginBase_release(struct PluginBase* self);
CLOOP_EXTERN_C void PluginBase_setOwner(struct PluginBase* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* PluginBase_getOwner(struct PluginBase* self);

#define PluginSet_VERSION 7

struct PluginSet;

struct PluginSetVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct PluginSet* self);
	int (*release)(struct PluginSet* self);
	const char* (*getName)(const struct PluginSet* self);
	const char* (*getModuleName)(const struct PluginSet* self);
	struct PluginBase* (*getPlugin)(struct PluginSet* self, struct Status* status);
	void (*next)(struct PluginSet* self, struct Status* status);
	void (*set)(struct PluginSet* self, struct Status* status, const char* s);
};

struct PluginSet
{
	void* cloopDummy[1];
	struct PluginSetVTable* vtable;
};

CLOOP_EXTERN_C void PluginSet_addRef(struct PluginSet* self);
CLOOP_EXTERN_C int PluginSet_release(struct PluginSet* self);
CLOOP_EXTERN_C const char* PluginSet_getName(const struct PluginSet* self);
CLOOP_EXTERN_C const char* PluginSet_getModuleName(const struct PluginSet* self);
CLOOP_EXTERN_C struct PluginBase* PluginSet_getPlugin(struct PluginSet* self, struct Status* status);
CLOOP_EXTERN_C void PluginSet_next(struct PluginSet* self, struct Status* status);
CLOOP_EXTERN_C void PluginSet_set(struct PluginSet* self, struct Status* status, const char* s);

#define ConfigEntry_VERSION 7

struct ConfigEntry;

struct ConfigEntryVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct ConfigEntry* self);
	int (*release)(struct ConfigEntry* self);
	const char* (*getName)(struct ConfigEntry* self);
	const char* (*getValue)(struct ConfigEntry* self);
	ISC_INT64 (*getIntValue)(struct ConfigEntry* self);
	FB_BOOLEAN (*getBoolValue)(struct ConfigEntry* self);
	struct Config* (*getSubConfig)(struct ConfigEntry* self, struct Status* status);
};

struct ConfigEntry
{
	void* cloopDummy[1];
	struct ConfigEntryVTable* vtable;
};

CLOOP_EXTERN_C void ConfigEntry_addRef(struct ConfigEntry* self);
CLOOP_EXTERN_C int ConfigEntry_release(struct ConfigEntry* self);
CLOOP_EXTERN_C const char* ConfigEntry_getName(struct ConfigEntry* self);
CLOOP_EXTERN_C const char* ConfigEntry_getValue(struct ConfigEntry* self);
CLOOP_EXTERN_C ISC_INT64 ConfigEntry_getIntValue(struct ConfigEntry* self);
CLOOP_EXTERN_C FB_BOOLEAN ConfigEntry_getBoolValue(struct ConfigEntry* self);
CLOOP_EXTERN_C struct Config* ConfigEntry_getSubConfig(struct ConfigEntry* self, struct Status* status);

#define Config_VERSION 5

struct Config;

struct ConfigVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Config* self);
	int (*release)(struct Config* self);
	struct ConfigEntry* (*find)(struct Config* self, struct Status* status, const char* name);
	struct ConfigEntry* (*findValue)(struct Config* self, struct Status* status, const char* name, const char* value);
	struct ConfigEntry* (*findPos)(struct Config* self, struct Status* status, const char* name, unsigned pos);
};

struct Config
{
	void* cloopDummy[1];
	struct ConfigVTable* vtable;
};

CLOOP_EXTERN_C void Config_addRef(struct Config* self);
CLOOP_EXTERN_C int Config_release(struct Config* self);
CLOOP_EXTERN_C struct ConfigEntry* Config_find(struct Config* self, struct Status* status, const char* name);
CLOOP_EXTERN_C struct ConfigEntry* Config_findValue(struct Config* self, struct Status* status, const char* name, const char* value);
CLOOP_EXTERN_C struct ConfigEntry* Config_findPos(struct Config* self, struct Status* status, const char* name, unsigned pos);

#define FirebirdConf_VERSION 6

struct FirebirdConf;

struct FirebirdConfVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct FirebirdConf* self);
	int (*release)(struct FirebirdConf* self);
	unsigned (*getKey)(struct FirebirdConf* self, const char* name);
	ISC_INT64 (*asInteger)(struct FirebirdConf* self, unsigned key);
	const char* (*asString)(struct FirebirdConf* self, unsigned key);
	FB_BOOLEAN (*asBoolean)(struct FirebirdConf* self, unsigned key);
};

struct FirebirdConf
{
	void* cloopDummy[1];
	struct FirebirdConfVTable* vtable;
};

CLOOP_EXTERN_C void FirebirdConf_addRef(struct FirebirdConf* self);
CLOOP_EXTERN_C int FirebirdConf_release(struct FirebirdConf* self);
CLOOP_EXTERN_C unsigned FirebirdConf_getKey(struct FirebirdConf* self, const char* name);
CLOOP_EXTERN_C ISC_INT64 FirebirdConf_asInteger(struct FirebirdConf* self, unsigned key);
CLOOP_EXTERN_C const char* FirebirdConf_asString(struct FirebirdConf* self, unsigned key);
CLOOP_EXTERN_C FB_BOOLEAN FirebirdConf_asBoolean(struct FirebirdConf* self, unsigned key);

#define PluginConfig_VERSION 6

struct PluginConfig;

struct PluginConfigVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct PluginConfig* self);
	int (*release)(struct PluginConfig* self);
	const char* (*getConfigFileName)(struct PluginConfig* self);
	struct Config* (*getDefaultConfig)(struct PluginConfig* self, struct Status* status);
	struct FirebirdConf* (*getFirebirdConf)(struct PluginConfig* self, struct Status* status);
	void (*setReleaseDelay)(struct PluginConfig* self, struct Status* status, ISC_UINT64 microSeconds);
};

struct PluginConfig
{
	void* cloopDummy[1];
	struct PluginConfigVTable* vtable;
};

CLOOP_EXTERN_C void PluginConfig_addRef(struct PluginConfig* self);
CLOOP_EXTERN_C int PluginConfig_release(struct PluginConfig* self);
CLOOP_EXTERN_C const char* PluginConfig_getConfigFileName(struct PluginConfig* self);
CLOOP_EXTERN_C struct Config* PluginConfig_getDefaultConfig(struct PluginConfig* self, struct Status* status);
CLOOP_EXTERN_C struct FirebirdConf* PluginConfig_getFirebirdConf(struct PluginConfig* self, struct Status* status);
CLOOP_EXTERN_C void PluginConfig_setReleaseDelay(struct PluginConfig* self, struct Status* status, ISC_UINT64 microSeconds);

#define PluginFactory_VERSION 1

struct PluginFactory;

struct PluginFactoryVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	struct PluginBase* (*createPlugin)(struct PluginFactory* self, struct Status* status, struct PluginConfig* factoryParameter);
};

struct PluginFactory
{
	void* cloopDummy[1];
	struct PluginFactoryVTable* vtable;
};

CLOOP_EXTERN_C struct PluginBase* PluginFactory_createPlugin(struct PluginFactory* self, struct Status* status, struct PluginConfig* factoryParameter);

#define PluginModule_VERSION 1

struct PluginModule;

struct PluginModuleVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*doClean)(struct PluginModule* self);
};

struct PluginModule
{
	void* cloopDummy[1];
	struct PluginModuleVTable* vtable;
};

CLOOP_EXTERN_C void PluginModule_doClean(struct PluginModule* self);

#define PluginManager_VERSION 6

#define PluginManager_TYPE_PROVIDER ((unsigned) (1))
#define PluginManager_TYPE_FIRST_NON_LIB ((unsigned) (2))
#define PluginManager_TYPE_AUTH_SERVER ((unsigned) (3))
#define PluginManager_TYPE_AUTH_CLIENT ((unsigned) (4))
#define PluginManager_TYPE_AUTH_USER_MANAGEMENT ((unsigned) (5))
#define PluginManager_TYPE_EXTERNAL_ENGINE ((unsigned) (6))
#define PluginManager_TYPE_TRACE ((unsigned) (7))
#define PluginManager_TYPE_WIRE_CRYPT ((unsigned) (8))
#define PluginManager_TYPE_DB_CRYPT ((unsigned) (9))
#define PluginManager_TYPE_KEY_HOLDER ((unsigned) (10))
#define PluginManager_TYPE_COUNT ((unsigned) (11))

struct PluginManager;

struct PluginManagerVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*registerPluginFactory)(struct PluginManager* self, unsigned pluginType, const char* defaultName, struct PluginFactory* factory);
	void (*registerModule)(struct PluginManager* self, struct PluginModule* cleanup);
	void (*unregisterModule)(struct PluginManager* self, struct PluginModule* cleanup);
	struct PluginSet* (*getPlugins)(struct PluginManager* self, struct Status* status, unsigned pluginType, const char* namesList, struct FirebirdConf* firebirdConf);
	struct Config* (*getConfig)(struct PluginManager* self, struct Status* status, const char* filename);
	void (*releasePlugin)(struct PluginManager* self, struct PluginBase* plugin);
};

struct PluginManager
{
	void* cloopDummy[1];
	struct PluginManagerVTable* vtable;
};

CLOOP_EXTERN_C void PluginManager_registerPluginFactory(struct PluginManager* self, unsigned pluginType, const char* defaultName, struct PluginFactory* factory);
CLOOP_EXTERN_C void PluginManager_registerModule(struct PluginManager* self, struct PluginModule* cleanup);
CLOOP_EXTERN_C void PluginManager_unregisterModule(struct PluginManager* self, struct PluginModule* cleanup);
CLOOP_EXTERN_C struct PluginSet* PluginManager_getPlugins(struct PluginManager* self, struct Status* status, unsigned pluginType, const char* namesList, struct FirebirdConf* firebirdConf);
CLOOP_EXTERN_C struct Config* PluginManager_getConfig(struct PluginManager* self, struct Status* status, const char* filename);
CLOOP_EXTERN_C void PluginManager_releasePlugin(struct PluginManager* self, struct PluginBase* plugin);

#define CryptKey_VERSION 4

struct CryptKey;

struct CryptKeyVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*setSymmetric)(struct CryptKey* self, struct Status* status, const char* type, unsigned keyLength, const void* key);
	void (*setAsymmetric)(struct CryptKey* self, struct Status* status, const char* type, unsigned encryptKeyLength, const void* encryptKey, unsigned decryptKeyLength, const void* decryptKey);
	const void* (*getEncryptKey)(struct CryptKey* self, unsigned* length);
	const void* (*getDecryptKey)(struct CryptKey* self, unsigned* length);
};

struct CryptKey
{
	void* cloopDummy[1];
	struct CryptKeyVTable* vtable;
};

CLOOP_EXTERN_C void CryptKey_setSymmetric(struct CryptKey* self, struct Status* status, const char* type, unsigned keyLength, const void* key);
CLOOP_EXTERN_C void CryptKey_setAsymmetric(struct CryptKey* self, struct Status* status, const char* type, unsigned encryptKeyLength, const void* encryptKey, unsigned decryptKeyLength, const void* decryptKey);
CLOOP_EXTERN_C const void* CryptKey_getEncryptKey(struct CryptKey* self, unsigned* length);
CLOOP_EXTERN_C const void* CryptKey_getDecryptKey(struct CryptKey* self, unsigned* length);

#define ConfigManager_VERSION 6

#define ConfigManager_DIR_BIN ((unsigned) (0))
#define ConfigManager_DIR_SBIN ((unsigned) (1))
#define ConfigManager_DIR_CONF ((unsigned) (2))
#define ConfigManager_DIR_LIB ((unsigned) (3))
#define ConfigManager_DIR_INC ((unsigned) (4))
#define ConfigManager_DIR_DOC ((unsigned) (5))
#define ConfigManager_DIR_UDF ((unsigned) (6))
#define ConfigManager_DIR_SAMPLE ((unsigned) (7))
#define ConfigManager_DIR_SAMPLEDB ((unsigned) (8))
#define ConfigManager_DIR_HELP ((unsigned) (9))
#define ConfigManager_DIR_INTL ((unsigned) (10))
#define ConfigManager_DIR_MISC ((unsigned) (11))
#define ConfigManager_DIR_SECDB ((unsigned) (12))
#define ConfigManager_DIR_MSG ((unsigned) (13))
#define ConfigManager_DIR_LOG ((unsigned) (14))
#define ConfigManager_DIR_GUARD ((unsigned) (15))
#define ConfigManager_DIR_PLUGINS ((unsigned) (16))
#define ConfigManager_DIR_COUNT ((unsigned) (17))

struct ConfigManager;

struct ConfigManagerVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getDirectory)(struct ConfigManager* self, unsigned code);
	struct FirebirdConf* (*getFirebirdConf)(struct ConfigManager* self);
	struct FirebirdConf* (*getDatabaseConf)(struct ConfigManager* self, const char* dbName);
	struct Config* (*getPluginConfig)(struct ConfigManager* self, const char* configuredPlugin);
	const char* (*getInstallDirectory)(struct ConfigManager* self);
	const char* (*getRootDirectory)(struct ConfigManager* self);
};

struct ConfigManager
{
	void* cloopDummy[1];
	struct ConfigManagerVTable* vtable;
};

CLOOP_EXTERN_C const char* ConfigManager_getDirectory(struct ConfigManager* self, unsigned code);
CLOOP_EXTERN_C struct FirebirdConf* ConfigManager_getFirebirdConf(struct ConfigManager* self);
CLOOP_EXTERN_C struct FirebirdConf* ConfigManager_getDatabaseConf(struct ConfigManager* self, const char* dbName);
CLOOP_EXTERN_C struct Config* ConfigManager_getPluginConfig(struct ConfigManager* self, const char* configuredPlugin);
CLOOP_EXTERN_C const char* ConfigManager_getInstallDirectory(struct ConfigManager* self);
CLOOP_EXTERN_C const char* ConfigManager_getRootDirectory(struct ConfigManager* self);

#define EventCallback_VERSION 3

struct EventCallback;

struct EventCallbackVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct EventCallback* self);
	int (*release)(struct EventCallback* self);
	void (*eventCallbackFunction)(struct EventCallback* self, unsigned length, const unsigned char* events);
};

struct EventCallback
{
	void* cloopDummy[1];
	struct EventCallbackVTable* vtable;
};

CLOOP_EXTERN_C void EventCallback_addRef(struct EventCallback* self);
CLOOP_EXTERN_C int EventCallback_release(struct EventCallback* self);
CLOOP_EXTERN_C void EventCallback_eventCallbackFunction(struct EventCallback* self, unsigned length, const unsigned char* events);

#define Blob_VERSION 8

struct Blob;

struct BlobVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Blob* self);
	int (*release)(struct Blob* self);
	void (*getInfo)(struct Blob* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
	int (*getSegment)(struct Blob* self, struct Status* status, unsigned bufferLength, void* buffer, unsigned* segmentLength);
	void (*putSegment)(struct Blob* self, struct Status* status, unsigned length, const void* buffer);
	void (*cancel)(struct Blob* self, struct Status* status);
	void (*close)(struct Blob* self, struct Status* status);
	int (*seek)(struct Blob* self, struct Status* status, int mode, int offset);
};

struct Blob
{
	void* cloopDummy[1];
	struct BlobVTable* vtable;
};

CLOOP_EXTERN_C void Blob_addRef(struct Blob* self);
CLOOP_EXTERN_C int Blob_release(struct Blob* self);
CLOOP_EXTERN_C void Blob_getInfo(struct Blob* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
CLOOP_EXTERN_C int Blob_getSegment(struct Blob* self, struct Status* status, unsigned bufferLength, void* buffer, unsigned* segmentLength);
CLOOP_EXTERN_C void Blob_putSegment(struct Blob* self, struct Status* status, unsigned length, const void* buffer);
CLOOP_EXTERN_C void Blob_cancel(struct Blob* self, struct Status* status);
CLOOP_EXTERN_C void Blob_close(struct Blob* self, struct Status* status);
CLOOP_EXTERN_C int Blob_seek(struct Blob* self, struct Status* status, int mode, int offset);

#define Transaction_VERSION 12

struct Transaction;

struct TransactionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Transaction* self);
	int (*release)(struct Transaction* self);
	void (*getInfo)(struct Transaction* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
	void (*prepare)(struct Transaction* self, struct Status* status, unsigned msgLength, const unsigned char* message);
	void (*commit)(struct Transaction* self, struct Status* status);
	void (*commitRetaining)(struct Transaction* self, struct Status* status);
	void (*rollback)(struct Transaction* self, struct Status* status);
	void (*rollbackRetaining)(struct Transaction* self, struct Status* status);
	void (*disconnect)(struct Transaction* self, struct Status* status);
	struct Transaction* (*join)(struct Transaction* self, struct Status* status, struct Transaction* transaction);
	struct Transaction* (*validate)(struct Transaction* self, struct Status* status, struct Attachment* attachment);
	struct Transaction* (*enterDtc)(struct Transaction* self, struct Status* status);
};

struct Transaction
{
	void* cloopDummy[1];
	struct TransactionVTable* vtable;
};

CLOOP_EXTERN_C void Transaction_addRef(struct Transaction* self);
CLOOP_EXTERN_C int Transaction_release(struct Transaction* self);
CLOOP_EXTERN_C void Transaction_getInfo(struct Transaction* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
CLOOP_EXTERN_C void Transaction_prepare(struct Transaction* self, struct Status* status, unsigned msgLength, const unsigned char* message);
CLOOP_EXTERN_C void Transaction_commit(struct Transaction* self, struct Status* status);
CLOOP_EXTERN_C void Transaction_commitRetaining(struct Transaction* self, struct Status* status);
CLOOP_EXTERN_C void Transaction_rollback(struct Transaction* self, struct Status* status);
CLOOP_EXTERN_C void Transaction_rollbackRetaining(struct Transaction* self, struct Status* status);
CLOOP_EXTERN_C void Transaction_disconnect(struct Transaction* self, struct Status* status);
CLOOP_EXTERN_C struct Transaction* Transaction_join(struct Transaction* self, struct Status* status, struct Transaction* transaction);
CLOOP_EXTERN_C struct Transaction* Transaction_validate(struct Transaction* self, struct Status* status, struct Attachment* attachment);
CLOOP_EXTERN_C struct Transaction* Transaction_enterDtc(struct Transaction* self, struct Status* status);

#define MessageMetadata_VERSION 17

struct MessageMetadata;

struct MessageMetadataVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct MessageMetadata* self);
	int (*release)(struct MessageMetadata* self);
	unsigned (*getCount)(struct MessageMetadata* self, struct Status* status);
	const char* (*getField)(struct MessageMetadata* self, struct Status* status, unsigned index);
	const char* (*getRelation)(struct MessageMetadata* self, struct Status* status, unsigned index);
	const char* (*getOwner)(struct MessageMetadata* self, struct Status* status, unsigned index);
	const char* (*getAlias)(struct MessageMetadata* self, struct Status* status, unsigned index);
	unsigned (*getType)(struct MessageMetadata* self, struct Status* status, unsigned index);
	FB_BOOLEAN (*isNullable)(struct MessageMetadata* self, struct Status* status, unsigned index);
	int (*getSubType)(struct MessageMetadata* self, struct Status* status, unsigned index);
	unsigned (*getLength)(struct MessageMetadata* self, struct Status* status, unsigned index);
	int (*getScale)(struct MessageMetadata* self, struct Status* status, unsigned index);
	unsigned (*getCharSet)(struct MessageMetadata* self, struct Status* status, unsigned index);
	unsigned (*getOffset)(struct MessageMetadata* self, struct Status* status, unsigned index);
	unsigned (*getNullOffset)(struct MessageMetadata* self, struct Status* status, unsigned index);
	struct MetadataBuilder* (*getBuilder)(struct MessageMetadata* self, struct Status* status);
	unsigned (*getMessageLength)(struct MessageMetadata* self, struct Status* status);
};

struct MessageMetadata
{
	void* cloopDummy[1];
	struct MessageMetadataVTable* vtable;
};

CLOOP_EXTERN_C void MessageMetadata_addRef(struct MessageMetadata* self);
CLOOP_EXTERN_C int MessageMetadata_release(struct MessageMetadata* self);
CLOOP_EXTERN_C unsigned MessageMetadata_getCount(struct MessageMetadata* self, struct Status* status);
CLOOP_EXTERN_C const char* MessageMetadata_getField(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C const char* MessageMetadata_getRelation(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C const char* MessageMetadata_getOwner(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C const char* MessageMetadata_getAlias(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C unsigned MessageMetadata_getType(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C FB_BOOLEAN MessageMetadata_isNullable(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C int MessageMetadata_getSubType(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C unsigned MessageMetadata_getLength(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C int MessageMetadata_getScale(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C unsigned MessageMetadata_getCharSet(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C unsigned MessageMetadata_getOffset(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C unsigned MessageMetadata_getNullOffset(struct MessageMetadata* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C struct MetadataBuilder* MessageMetadata_getBuilder(struct MessageMetadata* self, struct Status* status);
CLOOP_EXTERN_C unsigned MessageMetadata_getMessageLength(struct MessageMetadata* self, struct Status* status);

#define MetadataBuilder_VERSION 12

struct MetadataBuilder;

struct MetadataBuilderVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct MetadataBuilder* self);
	int (*release)(struct MetadataBuilder* self);
	void (*setType)(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned type);
	void (*setSubType)(struct MetadataBuilder* self, struct Status* status, unsigned index, int subType);
	void (*setLength)(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned length);
	void (*setCharSet)(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned charSet);
	void (*setScale)(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned scale);
	void (*truncate)(struct MetadataBuilder* self, struct Status* status, unsigned count);
	void (*moveNameToIndex)(struct MetadataBuilder* self, struct Status* status, const char* name, unsigned index);
	void (*remove)(struct MetadataBuilder* self, struct Status* status, unsigned index);
	unsigned (*addField)(struct MetadataBuilder* self, struct Status* status);
	struct MessageMetadata* (*getMetadata)(struct MetadataBuilder* self, struct Status* status);
};

struct MetadataBuilder
{
	void* cloopDummy[1];
	struct MetadataBuilderVTable* vtable;
};

CLOOP_EXTERN_C void MetadataBuilder_addRef(struct MetadataBuilder* self);
CLOOP_EXTERN_C int MetadataBuilder_release(struct MetadataBuilder* self);
CLOOP_EXTERN_C void MetadataBuilder_setType(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned type);
CLOOP_EXTERN_C void MetadataBuilder_setSubType(struct MetadataBuilder* self, struct Status* status, unsigned index, int subType);
CLOOP_EXTERN_C void MetadataBuilder_setLength(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned length);
CLOOP_EXTERN_C void MetadataBuilder_setCharSet(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned charSet);
CLOOP_EXTERN_C void MetadataBuilder_setScale(struct MetadataBuilder* self, struct Status* status, unsigned index, unsigned scale);
CLOOP_EXTERN_C void MetadataBuilder_truncate(struct MetadataBuilder* self, struct Status* status, unsigned count);
CLOOP_EXTERN_C void MetadataBuilder_moveNameToIndex(struct MetadataBuilder* self, struct Status* status, const char* name, unsigned index);
CLOOP_EXTERN_C void MetadataBuilder_remove(struct MetadataBuilder* self, struct Status* status, unsigned index);
CLOOP_EXTERN_C unsigned MetadataBuilder_addField(struct MetadataBuilder* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* MetadataBuilder_getMetadata(struct MetadataBuilder* self, struct Status* status);

#define ResultSet_VERSION 13

struct ResultSet;

struct ResultSetVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct ResultSet* self);
	int (*release)(struct ResultSet* self);
	int (*fetchNext)(struct ResultSet* self, struct Status* status, void* message);
	int (*fetchPrior)(struct ResultSet* self, struct Status* status, void* message);
	int (*fetchFirst)(struct ResultSet* self, struct Status* status, void* message);
	int (*fetchLast)(struct ResultSet* self, struct Status* status, void* message);
	int (*fetchAbsolute)(struct ResultSet* self, struct Status* status, int position, void* message);
	int (*fetchRelative)(struct ResultSet* self, struct Status* status, int offset, void* message);
	FB_BOOLEAN (*isEof)(struct ResultSet* self, struct Status* status);
	FB_BOOLEAN (*isBof)(struct ResultSet* self, struct Status* status);
	struct MessageMetadata* (*getMetadata)(struct ResultSet* self, struct Status* status);
	void (*close)(struct ResultSet* self, struct Status* status);
	void (*setDelayedOutputFormat)(struct ResultSet* self, struct Status* status, struct MessageMetadata* format);
};

struct ResultSet
{
	void* cloopDummy[1];
	struct ResultSetVTable* vtable;
};

CLOOP_EXTERN_C void ResultSet_addRef(struct ResultSet* self);
CLOOP_EXTERN_C int ResultSet_release(struct ResultSet* self);
CLOOP_EXTERN_C int ResultSet_fetchNext(struct ResultSet* self, struct Status* status, void* message);
CLOOP_EXTERN_C int ResultSet_fetchPrior(struct ResultSet* self, struct Status* status, void* message);
CLOOP_EXTERN_C int ResultSet_fetchFirst(struct ResultSet* self, struct Status* status, void* message);
CLOOP_EXTERN_C int ResultSet_fetchLast(struct ResultSet* self, struct Status* status, void* message);
CLOOP_EXTERN_C int ResultSet_fetchAbsolute(struct ResultSet* self, struct Status* status, int position, void* message);
CLOOP_EXTERN_C int ResultSet_fetchRelative(struct ResultSet* self, struct Status* status, int offset, void* message);
CLOOP_EXTERN_C FB_BOOLEAN ResultSet_isEof(struct ResultSet* self, struct Status* status);
CLOOP_EXTERN_C FB_BOOLEAN ResultSet_isBof(struct ResultSet* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* ResultSet_getMetadata(struct ResultSet* self, struct Status* status);
CLOOP_EXTERN_C void ResultSet_close(struct ResultSet* self, struct Status* status);
CLOOP_EXTERN_C void ResultSet_setDelayedOutputFormat(struct ResultSet* self, struct Status* status, struct MessageMetadata* format);

#define Statement_VERSION 13

#define Statement_PREPARE_PREFETCH_NONE ((unsigned) (0))
#define Statement_PREPARE_PREFETCH_TYPE ((unsigned) (1))
#define Statement_PREPARE_PREFETCH_INPUT_PARAMETERS ((unsigned) (2))
#define Statement_PREPARE_PREFETCH_OUTPUT_PARAMETERS ((unsigned) (4))
#define Statement_PREPARE_PREFETCH_LEGACY_PLAN ((unsigned) (8))
#define Statement_PREPARE_PREFETCH_DETAILED_PLAN ((unsigned) (16))
#define Statement_PREPARE_PREFETCH_AFFECTED_RECORDS ((unsigned) (32))
#define Statement_PREPARE_PREFETCH_FLAGS ((unsigned) (64))
#define Statement_PREPARE_PREFETCH_METADATA ((unsigned) (Statement_PREPARE_PREFETCH_TYPE | Statement_PREPARE_PREFETCH_FLAGS | Statement_PREPARE_PREFETCH_INPUT_PARAMETERS | Statement_PREPARE_PREFETCH_OUTPUT_PARAMETERS))
#define Statement_PREPARE_PREFETCH_ALL ((unsigned) (Statement_PREPARE_PREFETCH_METADATA | Statement_PREPARE_PREFETCH_LEGACY_PLAN | Statement_PREPARE_PREFETCH_DETAILED_PLAN | Statement_PREPARE_PREFETCH_AFFECTED_RECORDS))
#define Statement_FLAG_HAS_CURSOR ((unsigned) (1))
#define Statement_FLAG_REPEAT_EXECUTE ((unsigned) (2))
#define Statement_CURSOR_TYPE_SCROLLABLE ((unsigned) (1))

struct Statement;

struct StatementVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Statement* self);
	int (*release)(struct Statement* self);
	void (*getInfo)(struct Statement* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
	unsigned (*getType)(struct Statement* self, struct Status* status);
	const char* (*getPlan)(struct Statement* self, struct Status* status, FB_BOOLEAN detailed);
	ISC_UINT64 (*getAffectedRecords)(struct Statement* self, struct Status* status);
	struct MessageMetadata* (*getInputMetadata)(struct Statement* self, struct Status* status);
	struct MessageMetadata* (*getOutputMetadata)(struct Statement* self, struct Status* status);
	struct Transaction* (*execute)(struct Statement* self, struct Status* status, struct Transaction* transaction, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, void* outBuffer);
	struct ResultSet* (*openCursor)(struct Statement* self, struct Status* status, struct Transaction* transaction, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, unsigned flags);
	void (*setCursorName)(struct Statement* self, struct Status* status, const char* name);
	void (*free)(struct Statement* self, struct Status* status);
	unsigned (*getFlags)(struct Statement* self, struct Status* status);
};

struct Statement
{
	void* cloopDummy[1];
	struct StatementVTable* vtable;
};

CLOOP_EXTERN_C void Statement_addRef(struct Statement* self);
CLOOP_EXTERN_C int Statement_release(struct Statement* self);
CLOOP_EXTERN_C void Statement_getInfo(struct Statement* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
CLOOP_EXTERN_C unsigned Statement_getType(struct Statement* self, struct Status* status);
CLOOP_EXTERN_C const char* Statement_getPlan(struct Statement* self, struct Status* status, FB_BOOLEAN detailed);
CLOOP_EXTERN_C ISC_UINT64 Statement_getAffectedRecords(struct Statement* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* Statement_getInputMetadata(struct Statement* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* Statement_getOutputMetadata(struct Statement* self, struct Status* status);
CLOOP_EXTERN_C struct Transaction* Statement_execute(struct Statement* self, struct Status* status, struct Transaction* transaction, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, void* outBuffer);
CLOOP_EXTERN_C struct ResultSet* Statement_openCursor(struct Statement* self, struct Status* status, struct Transaction* transaction, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, unsigned flags);
CLOOP_EXTERN_C void Statement_setCursorName(struct Statement* self, struct Status* status, const char* name);
CLOOP_EXTERN_C void Statement_free(struct Statement* self, struct Status* status);
CLOOP_EXTERN_C unsigned Statement_getFlags(struct Statement* self, struct Status* status);

#define Request_VERSION 9

struct Request;

struct RequestVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Request* self);
	int (*release)(struct Request* self);
	void (*receive)(struct Request* self, struct Status* status, int level, unsigned msgType, unsigned length, unsigned char* message);
	void (*send)(struct Request* self, struct Status* status, int level, unsigned msgType, unsigned length, const unsigned char* message);
	void (*getInfo)(struct Request* self, struct Status* status, int level, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
	void (*start)(struct Request* self, struct Status* status, struct Transaction* tra, int level);
	void (*startAndSend)(struct Request* self, struct Status* status, struct Transaction* tra, int level, unsigned msgType, unsigned length, const unsigned char* message);
	void (*unwind)(struct Request* self, struct Status* status, int level);
	void (*free)(struct Request* self, struct Status* status);
};

struct Request
{
	void* cloopDummy[1];
	struct RequestVTable* vtable;
};

CLOOP_EXTERN_C void Request_addRef(struct Request* self);
CLOOP_EXTERN_C int Request_release(struct Request* self);
CLOOP_EXTERN_C void Request_receive(struct Request* self, struct Status* status, int level, unsigned msgType, unsigned length, unsigned char* message);
CLOOP_EXTERN_C void Request_send(struct Request* self, struct Status* status, int level, unsigned msgType, unsigned length, const unsigned char* message);
CLOOP_EXTERN_C void Request_getInfo(struct Request* self, struct Status* status, int level, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
CLOOP_EXTERN_C void Request_start(struct Request* self, struct Status* status, struct Transaction* tra, int level);
CLOOP_EXTERN_C void Request_startAndSend(struct Request* self, struct Status* status, struct Transaction* tra, int level, unsigned msgType, unsigned length, const unsigned char* message);
CLOOP_EXTERN_C void Request_unwind(struct Request* self, struct Status* status, int level);
CLOOP_EXTERN_C void Request_free(struct Request* self, struct Status* status);

#define Events_VERSION 3

struct Events;

struct EventsVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Events* self);
	int (*release)(struct Events* self);
	void (*cancel)(struct Events* self, struct Status* status);
};

struct Events
{
	void* cloopDummy[1];
	struct EventsVTable* vtable;
};

CLOOP_EXTERN_C void Events_addRef(struct Events* self);
CLOOP_EXTERN_C int Events_release(struct Events* self);
CLOOP_EXTERN_C void Events_cancel(struct Events* self, struct Status* status);

#define Attachment_VERSION 20

struct Attachment;

struct AttachmentVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Attachment* self);
	int (*release)(struct Attachment* self);
	void (*getInfo)(struct Attachment* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
	struct Transaction* (*startTransaction)(struct Attachment* self, struct Status* status, unsigned tpbLength, const unsigned char* tpb);
	struct Transaction* (*reconnectTransaction)(struct Attachment* self, struct Status* status, unsigned length, const unsigned char* id);
	struct Request* (*compileRequest)(struct Attachment* self, struct Status* status, unsigned blrLength, const unsigned char* blr);
	void (*transactRequest)(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned blrLength, const unsigned char* blr, unsigned inMsgLength, const unsigned char* inMsg, unsigned outMsgLength, unsigned char* outMsg);
	struct Blob* (*createBlob)(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned bpbLength, const unsigned char* bpb);
	struct Blob* (*openBlob)(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned bpbLength, const unsigned char* bpb);
	int (*getSlice)(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned sdlLength, const unsigned char* sdl, unsigned paramLength, const unsigned char* param, int sliceLength, unsigned char* slice);
	void (*putSlice)(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned sdlLength, const unsigned char* sdl, unsigned paramLength, const unsigned char* param, int sliceLength, unsigned char* slice);
	void (*executeDyn)(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned length, const unsigned char* dyn);
	struct Statement* (*prepare)(struct Attachment* self, struct Status* status, struct Transaction* tra, unsigned stmtLength, const char* sqlStmt, unsigned dialect, unsigned flags);
	struct Transaction* (*execute)(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned stmtLength, const char* sqlStmt, unsigned dialect, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, void* outBuffer);
	struct ResultSet* (*openCursor)(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned stmtLength, const char* sqlStmt, unsigned dialect, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, const char* cursorName, unsigned cursorFlags);
	struct Events* (*queEvents)(struct Attachment* self, struct Status* status, struct EventCallback* callback, unsigned length, const unsigned char* events);
	void (*cancelOperation)(struct Attachment* self, struct Status* status, int option);
	void (*ping)(struct Attachment* self, struct Status* status);
	void (*detach)(struct Attachment* self, struct Status* status);
	void (*dropDatabase)(struct Attachment* self, struct Status* status);
};

struct Attachment
{
	void* cloopDummy[1];
	struct AttachmentVTable* vtable;
};

CLOOP_EXTERN_C void Attachment_addRef(struct Attachment* self);
CLOOP_EXTERN_C int Attachment_release(struct Attachment* self);
CLOOP_EXTERN_C void Attachment_getInfo(struct Attachment* self, struct Status* status, unsigned itemsLength, const unsigned char* items, unsigned bufferLength, unsigned char* buffer);
CLOOP_EXTERN_C struct Transaction* Attachment_startTransaction(struct Attachment* self, struct Status* status, unsigned tpbLength, const unsigned char* tpb);
CLOOP_EXTERN_C struct Transaction* Attachment_reconnectTransaction(struct Attachment* self, struct Status* status, unsigned length, const unsigned char* id);
CLOOP_EXTERN_C struct Request* Attachment_compileRequest(struct Attachment* self, struct Status* status, unsigned blrLength, const unsigned char* blr);
CLOOP_EXTERN_C void Attachment_transactRequest(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned blrLength, const unsigned char* blr, unsigned inMsgLength, const unsigned char* inMsg, unsigned outMsgLength, unsigned char* outMsg);
CLOOP_EXTERN_C struct Blob* Attachment_createBlob(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned bpbLength, const unsigned char* bpb);
CLOOP_EXTERN_C struct Blob* Attachment_openBlob(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned bpbLength, const unsigned char* bpb);
CLOOP_EXTERN_C int Attachment_getSlice(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned sdlLength, const unsigned char* sdl, unsigned paramLength, const unsigned char* param, int sliceLength, unsigned char* slice);
CLOOP_EXTERN_C void Attachment_putSlice(struct Attachment* self, struct Status* status, struct Transaction* transaction, ISC_QUAD* id, unsigned sdlLength, const unsigned char* sdl, unsigned paramLength, const unsigned char* param, int sliceLength, unsigned char* slice);
CLOOP_EXTERN_C void Attachment_executeDyn(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned length, const unsigned char* dyn);
CLOOP_EXTERN_C struct Statement* Attachment_prepare(struct Attachment* self, struct Status* status, struct Transaction* tra, unsigned stmtLength, const char* sqlStmt, unsigned dialect, unsigned flags);
CLOOP_EXTERN_C struct Transaction* Attachment_execute(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned stmtLength, const char* sqlStmt, unsigned dialect, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, void* outBuffer);
CLOOP_EXTERN_C struct ResultSet* Attachment_openCursor(struct Attachment* self, struct Status* status, struct Transaction* transaction, unsigned stmtLength, const char* sqlStmt, unsigned dialect, struct MessageMetadata* inMetadata, void* inBuffer, struct MessageMetadata* outMetadata, const char* cursorName, unsigned cursorFlags);
CLOOP_EXTERN_C struct Events* Attachment_queEvents(struct Attachment* self, struct Status* status, struct EventCallback* callback, unsigned length, const unsigned char* events);
CLOOP_EXTERN_C void Attachment_cancelOperation(struct Attachment* self, struct Status* status, int option);
CLOOP_EXTERN_C void Attachment_ping(struct Attachment* self, struct Status* status);
CLOOP_EXTERN_C void Attachment_detach(struct Attachment* self, struct Status* status);
CLOOP_EXTERN_C void Attachment_dropDatabase(struct Attachment* self, struct Status* status);

#define Service_VERSION 5

struct Service;

struct ServiceVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Service* self);
	int (*release)(struct Service* self);
	void (*detach)(struct Service* self, struct Status* status);
	void (*query)(struct Service* self, struct Status* status, unsigned sendLength, const unsigned char* sendItems, unsigned receiveLength, const unsigned char* receiveItems, unsigned bufferLength, unsigned char* buffer);
	void (*start)(struct Service* self, struct Status* status, unsigned spbLength, const unsigned char* spb);
};

struct Service
{
	void* cloopDummy[1];
	struct ServiceVTable* vtable;
};

CLOOP_EXTERN_C void Service_addRef(struct Service* self);
CLOOP_EXTERN_C int Service_release(struct Service* self);
CLOOP_EXTERN_C void Service_detach(struct Service* self, struct Status* status);
CLOOP_EXTERN_C void Service_query(struct Service* self, struct Status* status, unsigned sendLength, const unsigned char* sendItems, unsigned receiveLength, const unsigned char* receiveItems, unsigned bufferLength, unsigned char* buffer);
CLOOP_EXTERN_C void Service_start(struct Service* self, struct Status* status, unsigned spbLength, const unsigned char* spb);

#define Provider_VERSION 9

struct Provider;

struct ProviderVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Provider* self);
	int (*release)(struct Provider* self);
	void (*setOwner)(struct Provider* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct Provider* self);
	struct Attachment* (*attachDatabase)(struct Provider* self, struct Status* status, const char* fileName, unsigned dpbLength, const unsigned char* dpb);
	struct Attachment* (*createDatabase)(struct Provider* self, struct Status* status, const char* fileName, unsigned dpbLength, const unsigned char* dpb);
	struct Service* (*attachServiceManager)(struct Provider* self, struct Status* status, const char* service, unsigned spbLength, const unsigned char* spb);
	void (*shutdown)(struct Provider* self, struct Status* status, unsigned timeout, const int reason);
	void (*setDbCryptCallback)(struct Provider* self, struct Status* status, struct CryptKeyCallback* cryptCallback);
};

struct Provider
{
	void* cloopDummy[1];
	struct ProviderVTable* vtable;
};

CLOOP_EXTERN_C void Provider_addRef(struct Provider* self);
CLOOP_EXTERN_C int Provider_release(struct Provider* self);
CLOOP_EXTERN_C void Provider_setOwner(struct Provider* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* Provider_getOwner(struct Provider* self);
CLOOP_EXTERN_C struct Attachment* Provider_attachDatabase(struct Provider* self, struct Status* status, const char* fileName, unsigned dpbLength, const unsigned char* dpb);
CLOOP_EXTERN_C struct Attachment* Provider_createDatabase(struct Provider* self, struct Status* status, const char* fileName, unsigned dpbLength, const unsigned char* dpb);
CLOOP_EXTERN_C struct Service* Provider_attachServiceManager(struct Provider* self, struct Status* status, const char* service, unsigned spbLength, const unsigned char* spb);
CLOOP_EXTERN_C void Provider_shutdown(struct Provider* self, struct Status* status, unsigned timeout, const int reason);
CLOOP_EXTERN_C void Provider_setDbCryptCallback(struct Provider* self, struct Status* status, struct CryptKeyCallback* cryptCallback);

#define DtcStart_VERSION 4

struct DtcStart;

struct DtcStartVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct DtcStart* self);
	void (*addAttachment)(struct DtcStart* self, struct Status* status, struct Attachment* att);
	void (*addWithTpb)(struct DtcStart* self, struct Status* status, struct Attachment* att, unsigned length, const unsigned char* tpb);
	struct Transaction* (*start)(struct DtcStart* self, struct Status* status);
};

struct DtcStart
{
	void* cloopDummy[1];
	struct DtcStartVTable* vtable;
};

CLOOP_EXTERN_C void DtcStart_dispose(struct DtcStart* self);
CLOOP_EXTERN_C void DtcStart_addAttachment(struct DtcStart* self, struct Status* status, struct Attachment* att);
CLOOP_EXTERN_C void DtcStart_addWithTpb(struct DtcStart* self, struct Status* status, struct Attachment* att, unsigned length, const unsigned char* tpb);
CLOOP_EXTERN_C struct Transaction* DtcStart_start(struct DtcStart* self, struct Status* status);

#define Dtc_VERSION 2

struct Dtc;

struct DtcVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	struct Transaction* (*join)(struct Dtc* self, struct Status* status, struct Transaction* one, struct Transaction* two);
	struct DtcStart* (*startBuilder)(struct Dtc* self, struct Status* status);
};

struct Dtc
{
	void* cloopDummy[1];
	struct DtcVTable* vtable;
};

CLOOP_EXTERN_C struct Transaction* Dtc_join(struct Dtc* self, struct Status* status, struct Transaction* one, struct Transaction* two);
CLOOP_EXTERN_C struct DtcStart* Dtc_startBuilder(struct Dtc* self, struct Status* status);

#define Auth_VERSION 4

#define Auth_AUTH_FAILED ((int) (-1))
#define Auth_AUTH_SUCCESS ((int) (0))
#define Auth_AUTH_MORE_DATA ((int) (1))
#define Auth_AUTH_CONTINUE ((int) (2))

struct Auth;

struct AuthVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Auth* self);
	int (*release)(struct Auth* self);
	void (*setOwner)(struct Auth* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct Auth* self);
};

struct Auth
{
	void* cloopDummy[1];
	struct AuthVTable* vtable;
};

CLOOP_EXTERN_C void Auth_addRef(struct Auth* self);
CLOOP_EXTERN_C int Auth_release(struct Auth* self);
CLOOP_EXTERN_C void Auth_setOwner(struct Auth* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* Auth_getOwner(struct Auth* self);

#define Writer_VERSION 4

struct Writer;

struct WriterVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*reset)(struct Writer* self);
	void (*add)(struct Writer* self, struct Status* status, const char* name);
	void (*setType)(struct Writer* self, struct Status* status, const char* value);
	void (*setDb)(struct Writer* self, struct Status* status, const char* value);
};

struct Writer
{
	void* cloopDummy[1];
	struct WriterVTable* vtable;
};

CLOOP_EXTERN_C void Writer_reset(struct Writer* self);
CLOOP_EXTERN_C void Writer_add(struct Writer* self, struct Status* status, const char* name);
CLOOP_EXTERN_C void Writer_setType(struct Writer* self, struct Status* status, const char* value);
CLOOP_EXTERN_C void Writer_setDb(struct Writer* self, struct Status* status, const char* value);

#define ServerBlock_VERSION 4

struct ServerBlock;

struct ServerBlockVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getLogin)(struct ServerBlock* self);
	const unsigned char* (*getData)(struct ServerBlock* self, unsigned* length);
	void (*putData)(struct ServerBlock* self, struct Status* status, unsigned length, const void* data);
	struct CryptKey* (*newKey)(struct ServerBlock* self, struct Status* status);
};

struct ServerBlock
{
	void* cloopDummy[1];
	struct ServerBlockVTable* vtable;
};

CLOOP_EXTERN_C const char* ServerBlock_getLogin(struct ServerBlock* self);
CLOOP_EXTERN_C const unsigned char* ServerBlock_getData(struct ServerBlock* self, unsigned* length);
CLOOP_EXTERN_C void ServerBlock_putData(struct ServerBlock* self, struct Status* status, unsigned length, const void* data);
CLOOP_EXTERN_C struct CryptKey* ServerBlock_newKey(struct ServerBlock* self, struct Status* status);

#define ClientBlock_VERSION 7

struct ClientBlock;

struct ClientBlockVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct ClientBlock* self);
	int (*release)(struct ClientBlock* self);
	const char* (*getLogin)(struct ClientBlock* self);
	const char* (*getPassword)(struct ClientBlock* self);
	const unsigned char* (*getData)(struct ClientBlock* self, unsigned* length);
	void (*putData)(struct ClientBlock* self, struct Status* status, unsigned length, const void* data);
	struct CryptKey* (*newKey)(struct ClientBlock* self, struct Status* status);
};

struct ClientBlock
{
	void* cloopDummy[1];
	struct ClientBlockVTable* vtable;
};

CLOOP_EXTERN_C void ClientBlock_addRef(struct ClientBlock* self);
CLOOP_EXTERN_C int ClientBlock_release(struct ClientBlock* self);
CLOOP_EXTERN_C const char* ClientBlock_getLogin(struct ClientBlock* self);
CLOOP_EXTERN_C const char* ClientBlock_getPassword(struct ClientBlock* self);
CLOOP_EXTERN_C const unsigned char* ClientBlock_getData(struct ClientBlock* self, unsigned* length);
CLOOP_EXTERN_C void ClientBlock_putData(struct ClientBlock* self, struct Status* status, unsigned length, const void* data);
CLOOP_EXTERN_C struct CryptKey* ClientBlock_newKey(struct ClientBlock* self, struct Status* status);

#define Server_VERSION 5

struct Server;

struct ServerVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Server* self);
	int (*release)(struct Server* self);
	void (*setOwner)(struct Server* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct Server* self);
	int (*authenticate)(struct Server* self, struct Status* status, struct ServerBlock* sBlock, struct Writer* writerInterface);
};

struct Server
{
	void* cloopDummy[1];
	struct ServerVTable* vtable;
};

CLOOP_EXTERN_C void Server_addRef(struct Server* self);
CLOOP_EXTERN_C int Server_release(struct Server* self);
CLOOP_EXTERN_C void Server_setOwner(struct Server* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* Server_getOwner(struct Server* self);
CLOOP_EXTERN_C int Server_authenticate(struct Server* self, struct Status* status, struct ServerBlock* sBlock, struct Writer* writerInterface);

#define Client_VERSION 5

struct Client;

struct ClientVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Client* self);
	int (*release)(struct Client* self);
	void (*setOwner)(struct Client* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct Client* self);
	int (*authenticate)(struct Client* self, struct Status* status, struct ClientBlock* cBlock);
};

struct Client
{
	void* cloopDummy[1];
	struct ClientVTable* vtable;
};

CLOOP_EXTERN_C void Client_addRef(struct Client* self);
CLOOP_EXTERN_C int Client_release(struct Client* self);
CLOOP_EXTERN_C void Client_setOwner(struct Client* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* Client_getOwner(struct Client* self);
CLOOP_EXTERN_C int Client_authenticate(struct Client* self, struct Status* status, struct ClientBlock* cBlock);

#define UserField_VERSION 3

struct UserField;

struct UserFieldVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*entered)(struct UserField* self);
	int (*specified)(struct UserField* self);
	void (*setEntered)(struct UserField* self, struct Status* status, int newValue);
};

struct UserField
{
	void* cloopDummy[1];
	struct UserFieldVTable* vtable;
};

CLOOP_EXTERN_C int UserField_entered(struct UserField* self);
CLOOP_EXTERN_C int UserField_specified(struct UserField* self);
CLOOP_EXTERN_C void UserField_setEntered(struct UserField* self, struct Status* status, int newValue);

#define CharUserField_VERSION 5

struct CharUserField;

struct CharUserFieldVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*entered)(struct CharUserField* self);
	int (*specified)(struct CharUserField* self);
	void (*setEntered)(struct CharUserField* self, struct Status* status, int newValue);
	const char* (*get)(struct CharUserField* self);
	void (*set)(struct CharUserField* self, struct Status* status, const char* newValue);
};

struct CharUserField
{
	void* cloopDummy[1];
	struct CharUserFieldVTable* vtable;
};

CLOOP_EXTERN_C int CharUserField_entered(struct CharUserField* self);
CLOOP_EXTERN_C int CharUserField_specified(struct CharUserField* self);
CLOOP_EXTERN_C void CharUserField_setEntered(struct CharUserField* self, struct Status* status, int newValue);
CLOOP_EXTERN_C const char* CharUserField_get(struct CharUserField* self);
CLOOP_EXTERN_C void CharUserField_set(struct CharUserField* self, struct Status* status, const char* newValue);

#define IntUserField_VERSION 5

struct IntUserField;

struct IntUserFieldVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*entered)(struct IntUserField* self);
	int (*specified)(struct IntUserField* self);
	void (*setEntered)(struct IntUserField* self, struct Status* status, int newValue);
	int (*get)(struct IntUserField* self);
	void (*set)(struct IntUserField* self, struct Status* status, int newValue);
};

struct IntUserField
{
	void* cloopDummy[1];
	struct IntUserFieldVTable* vtable;
};

CLOOP_EXTERN_C int IntUserField_entered(struct IntUserField* self);
CLOOP_EXTERN_C int IntUserField_specified(struct IntUserField* self);
CLOOP_EXTERN_C void IntUserField_setEntered(struct IntUserField* self, struct Status* status, int newValue);
CLOOP_EXTERN_C int IntUserField_get(struct IntUserField* self);
CLOOP_EXTERN_C void IntUserField_set(struct IntUserField* self, struct Status* status, int newValue);

#define User_VERSION 11

struct User;

struct UserVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*operation)(struct User* self);
	struct CharUserField* (*userName)(struct User* self);
	struct CharUserField* (*password)(struct User* self);
	struct CharUserField* (*firstName)(struct User* self);
	struct CharUserField* (*lastName)(struct User* self);
	struct CharUserField* (*middleName)(struct User* self);
	struct CharUserField* (*comment)(struct User* self);
	struct CharUserField* (*attributes)(struct User* self);
	struct IntUserField* (*active)(struct User* self);
	struct IntUserField* (*admin)(struct User* self);
	void (*clear)(struct User* self, struct Status* status);
};

struct User
{
	void* cloopDummy[1];
	struct UserVTable* vtable;
};

CLOOP_EXTERN_C int User_operation(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_userName(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_password(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_firstName(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_lastName(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_middleName(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_comment(struct User* self);
CLOOP_EXTERN_C struct CharUserField* User_attributes(struct User* self);
CLOOP_EXTERN_C struct IntUserField* User_active(struct User* self);
CLOOP_EXTERN_C struct IntUserField* User_admin(struct User* self);
CLOOP_EXTERN_C void User_clear(struct User* self, struct Status* status);

#define ListUsers_VERSION 1

struct ListUsers;

struct ListUsersVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*list)(struct ListUsers* self, struct Status* status, struct User* user);
};

struct ListUsers
{
	void* cloopDummy[1];
	struct ListUsersVTable* vtable;
};

CLOOP_EXTERN_C void ListUsers_list(struct ListUsers* self, struct Status* status, struct User* user);

#define LogonInfo_VERSION 5

struct LogonInfo;

struct LogonInfoVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*name)(struct LogonInfo* self);
	const char* (*role)(struct LogonInfo* self);
	const char* (*networkProtocol)(struct LogonInfo* self);
	const char* (*remoteAddress)(struct LogonInfo* self);
	const unsigned char* (*authBlock)(struct LogonInfo* self, unsigned* length);
};

struct LogonInfo
{
	void* cloopDummy[1];
	struct LogonInfoVTable* vtable;
};

CLOOP_EXTERN_C const char* LogonInfo_name(struct LogonInfo* self);
CLOOP_EXTERN_C const char* LogonInfo_role(struct LogonInfo* self);
CLOOP_EXTERN_C const char* LogonInfo_networkProtocol(struct LogonInfo* self);
CLOOP_EXTERN_C const char* LogonInfo_remoteAddress(struct LogonInfo* self);
CLOOP_EXTERN_C const unsigned char* LogonInfo_authBlock(struct LogonInfo* self, unsigned* length);

#define Management_VERSION 8

struct Management;

struct ManagementVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Management* self);
	int (*release)(struct Management* self);
	void (*setOwner)(struct Management* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct Management* self);
	void (*start)(struct Management* self, struct Status* status, struct LogonInfo* logonInfo);
	int (*execute)(struct Management* self, struct Status* status, struct User* user, struct ListUsers* callback);
	void (*commit)(struct Management* self, struct Status* status);
	void (*rollback)(struct Management* self, struct Status* status);
};

struct Management
{
	void* cloopDummy[1];
	struct ManagementVTable* vtable;
};

CLOOP_EXTERN_C void Management_addRef(struct Management* self);
CLOOP_EXTERN_C int Management_release(struct Management* self);
CLOOP_EXTERN_C void Management_setOwner(struct Management* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* Management_getOwner(struct Management* self);
CLOOP_EXTERN_C void Management_start(struct Management* self, struct Status* status, struct LogonInfo* logonInfo);
CLOOP_EXTERN_C int Management_execute(struct Management* self, struct Status* status, struct User* user, struct ListUsers* callback);
CLOOP_EXTERN_C void Management_commit(struct Management* self, struct Status* status);
CLOOP_EXTERN_C void Management_rollback(struct Management* self, struct Status* status);

#define WireCryptPlugin_VERSION 8

struct WireCryptPlugin;

struct WireCryptPluginVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct WireCryptPlugin* self);
	int (*release)(struct WireCryptPlugin* self);
	void (*setOwner)(struct WireCryptPlugin* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct WireCryptPlugin* self);
	const char* (*getKnownTypes)(struct WireCryptPlugin* self, struct Status* status);
	void (*setKey)(struct WireCryptPlugin* self, struct Status* status, struct CryptKey* key);
	void (*encrypt)(struct WireCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);
	void (*decrypt)(struct WireCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);
};

struct WireCryptPlugin
{
	void* cloopDummy[1];
	struct WireCryptPluginVTable* vtable;
};

CLOOP_EXTERN_C void WireCryptPlugin_addRef(struct WireCryptPlugin* self);
CLOOP_EXTERN_C int WireCryptPlugin_release(struct WireCryptPlugin* self);
CLOOP_EXTERN_C void WireCryptPlugin_setOwner(struct WireCryptPlugin* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* WireCryptPlugin_getOwner(struct WireCryptPlugin* self);
CLOOP_EXTERN_C const char* WireCryptPlugin_getKnownTypes(struct WireCryptPlugin* self, struct Status* status);
CLOOP_EXTERN_C void WireCryptPlugin_setKey(struct WireCryptPlugin* self, struct Status* status, struct CryptKey* key);
CLOOP_EXTERN_C void WireCryptPlugin_encrypt(struct WireCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);
CLOOP_EXTERN_C void WireCryptPlugin_decrypt(struct WireCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);

#define CryptKeyCallback_VERSION 1

struct CryptKeyCallback;

struct CryptKeyCallbackVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	unsigned (*callback)(struct CryptKeyCallback* self, unsigned dataLength, const void* data, unsigned bufferLength, void* buffer);
};

struct CryptKeyCallback
{
	void* cloopDummy[1];
	struct CryptKeyCallbackVTable* vtable;
};

CLOOP_EXTERN_C unsigned CryptKeyCallback_callback(struct CryptKeyCallback* self, unsigned dataLength, const void* data, unsigned bufferLength, void* buffer);

#define KeyHolderPlugin_VERSION 6

struct KeyHolderPlugin;

struct KeyHolderPluginVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct KeyHolderPlugin* self);
	int (*release)(struct KeyHolderPlugin* self);
	void (*setOwner)(struct KeyHolderPlugin* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct KeyHolderPlugin* self);
	int (*keyCallback)(struct KeyHolderPlugin* self, struct Status* status, struct CryptKeyCallback* callback);
	struct CryptKeyCallback* (*keyHandle)(struct KeyHolderPlugin* self, struct Status* status, const char* keyName);
};

struct KeyHolderPlugin
{
	void* cloopDummy[1];
	struct KeyHolderPluginVTable* vtable;
};

CLOOP_EXTERN_C void KeyHolderPlugin_addRef(struct KeyHolderPlugin* self);
CLOOP_EXTERN_C int KeyHolderPlugin_release(struct KeyHolderPlugin* self);
CLOOP_EXTERN_C void KeyHolderPlugin_setOwner(struct KeyHolderPlugin* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* KeyHolderPlugin_getOwner(struct KeyHolderPlugin* self);
CLOOP_EXTERN_C int KeyHolderPlugin_keyCallback(struct KeyHolderPlugin* self, struct Status* status, struct CryptKeyCallback* callback);
CLOOP_EXTERN_C struct CryptKeyCallback* KeyHolderPlugin_keyHandle(struct KeyHolderPlugin* self, struct Status* status, const char* keyName);

#define DbCryptPlugin_VERSION 7

struct DbCryptPlugin;

struct DbCryptPluginVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct DbCryptPlugin* self);
	int (*release)(struct DbCryptPlugin* self);
	void (*setOwner)(struct DbCryptPlugin* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct DbCryptPlugin* self);
	void (*setKey)(struct DbCryptPlugin* self, struct Status* status, unsigned length, struct KeyHolderPlugin** sources);
	void (*encrypt)(struct DbCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);
	void (*decrypt)(struct DbCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);
};

struct DbCryptPlugin
{
	void* cloopDummy[1];
	struct DbCryptPluginVTable* vtable;
};

CLOOP_EXTERN_C void DbCryptPlugin_addRef(struct DbCryptPlugin* self);
CLOOP_EXTERN_C int DbCryptPlugin_release(struct DbCryptPlugin* self);
CLOOP_EXTERN_C void DbCryptPlugin_setOwner(struct DbCryptPlugin* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* DbCryptPlugin_getOwner(struct DbCryptPlugin* self);
CLOOP_EXTERN_C void DbCryptPlugin_setKey(struct DbCryptPlugin* self, struct Status* status, unsigned length, struct KeyHolderPlugin** sources);
CLOOP_EXTERN_C void DbCryptPlugin_encrypt(struct DbCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);
CLOOP_EXTERN_C void DbCryptPlugin_decrypt(struct DbCryptPlugin* self, struct Status* status, unsigned length, const void* from, void* to);

#define ExternalContext_VERSION 10

struct ExternalContext;

struct ExternalContextVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	struct Master* (*getMaster)(struct ExternalContext* self);
	struct ExternalEngine* (*getEngine)(struct ExternalContext* self, struct Status* status);
	struct Attachment* (*getAttachment)(struct ExternalContext* self, struct Status* status);
	struct Transaction* (*getTransaction)(struct ExternalContext* self, struct Status* status);
	const char* (*getUserName)(struct ExternalContext* self);
	const char* (*getDatabaseName)(struct ExternalContext* self);
	const char* (*getClientCharSet)(struct ExternalContext* self);
	int (*obtainInfoCode)(struct ExternalContext* self);
	void* (*getInfo)(struct ExternalContext* self, int code);
	void* (*setInfo)(struct ExternalContext* self, int code, void* value);
};

struct ExternalContext
{
	void* cloopDummy[1];
	struct ExternalContextVTable* vtable;
};

CLOOP_EXTERN_C struct Master* ExternalContext_getMaster(struct ExternalContext* self);
CLOOP_EXTERN_C struct ExternalEngine* ExternalContext_getEngine(struct ExternalContext* self, struct Status* status);
CLOOP_EXTERN_C struct Attachment* ExternalContext_getAttachment(struct ExternalContext* self, struct Status* status);
CLOOP_EXTERN_C struct Transaction* ExternalContext_getTransaction(struct ExternalContext* self, struct Status* status);
CLOOP_EXTERN_C const char* ExternalContext_getUserName(struct ExternalContext* self);
CLOOP_EXTERN_C const char* ExternalContext_getDatabaseName(struct ExternalContext* self);
CLOOP_EXTERN_C const char* ExternalContext_getClientCharSet(struct ExternalContext* self);
CLOOP_EXTERN_C int ExternalContext_obtainInfoCode(struct ExternalContext* self);
CLOOP_EXTERN_C void* ExternalContext_getInfo(struct ExternalContext* self, int code);
CLOOP_EXTERN_C void* ExternalContext_setInfo(struct ExternalContext* self, int code, void* value);

#define ExternalResultSet_VERSION 2

struct ExternalResultSet;

struct ExternalResultSetVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct ExternalResultSet* self);
	FB_BOOLEAN (*fetch)(struct ExternalResultSet* self, struct Status* status);
};

struct ExternalResultSet
{
	void* cloopDummy[1];
	struct ExternalResultSetVTable* vtable;
};

CLOOP_EXTERN_C void ExternalResultSet_dispose(struct ExternalResultSet* self);
CLOOP_EXTERN_C FB_BOOLEAN ExternalResultSet_fetch(struct ExternalResultSet* self, struct Status* status);

#define ExternalFunction_VERSION 3

struct ExternalFunction;

struct ExternalFunctionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct ExternalFunction* self);
	void (*getCharSet)(struct ExternalFunction* self, struct Status* status, struct ExternalContext* context, char* name, unsigned nameSize);
	void (*execute)(struct ExternalFunction* self, struct Status* status, struct ExternalContext* context, void* inMsg, void* outMsg);
};

struct ExternalFunction
{
	void* cloopDummy[1];
	struct ExternalFunctionVTable* vtable;
};

CLOOP_EXTERN_C void ExternalFunction_dispose(struct ExternalFunction* self);
CLOOP_EXTERN_C void ExternalFunction_getCharSet(struct ExternalFunction* self, struct Status* status, struct ExternalContext* context, char* name, unsigned nameSize);
CLOOP_EXTERN_C void ExternalFunction_execute(struct ExternalFunction* self, struct Status* status, struct ExternalContext* context, void* inMsg, void* outMsg);

#define ExternalProcedure_VERSION 3

struct ExternalProcedure;

struct ExternalProcedureVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct ExternalProcedure* self);
	void (*getCharSet)(struct ExternalProcedure* self, struct Status* status, struct ExternalContext* context, char* name, unsigned nameSize);
	struct ExternalResultSet* (*open)(struct ExternalProcedure* self, struct Status* status, struct ExternalContext* context, void* inMsg, void* outMsg);
};

struct ExternalProcedure
{
	void* cloopDummy[1];
	struct ExternalProcedureVTable* vtable;
};

CLOOP_EXTERN_C void ExternalProcedure_dispose(struct ExternalProcedure* self);
CLOOP_EXTERN_C void ExternalProcedure_getCharSet(struct ExternalProcedure* self, struct Status* status, struct ExternalContext* context, char* name, unsigned nameSize);
CLOOP_EXTERN_C struct ExternalResultSet* ExternalProcedure_open(struct ExternalProcedure* self, struct Status* status, struct ExternalContext* context, void* inMsg, void* outMsg);

#define ExternalTrigger_VERSION 3

#define ExternalTrigger_TYPE_BEFORE ((unsigned) (1))
#define ExternalTrigger_TYPE_AFTER ((unsigned) (2))
#define ExternalTrigger_TYPE_DATABASE ((unsigned) (3))
#define ExternalTrigger_ACTION_INSERT ((unsigned) (1))
#define ExternalTrigger_ACTION_UPDATE ((unsigned) (2))
#define ExternalTrigger_ACTION_DELETE ((unsigned) (3))
#define ExternalTrigger_ACTION_CONNECT ((unsigned) (4))
#define ExternalTrigger_ACTION_DISCONNECT ((unsigned) (5))
#define ExternalTrigger_ACTION_TRANS_START ((unsigned) (6))
#define ExternalTrigger_ACTION_TRANS_COMMIT ((unsigned) (7))
#define ExternalTrigger_ACTION_TRANS_ROLLBACK ((unsigned) (8))
#define ExternalTrigger_ACTION_DDL ((unsigned) (9))

struct ExternalTrigger;

struct ExternalTriggerVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct ExternalTrigger* self);
	void (*getCharSet)(struct ExternalTrigger* self, struct Status* status, struct ExternalContext* context, char* name, unsigned nameSize);
	void (*execute)(struct ExternalTrigger* self, struct Status* status, struct ExternalContext* context, unsigned action, void* oldMsg, void* newMsg);
};

struct ExternalTrigger
{
	void* cloopDummy[1];
	struct ExternalTriggerVTable* vtable;
};

CLOOP_EXTERN_C void ExternalTrigger_dispose(struct ExternalTrigger* self);
CLOOP_EXTERN_C void ExternalTrigger_getCharSet(struct ExternalTrigger* self, struct Status* status, struct ExternalContext* context, char* name, unsigned nameSize);
CLOOP_EXTERN_C void ExternalTrigger_execute(struct ExternalTrigger* self, struct Status* status, struct ExternalContext* context, unsigned action, void* oldMsg, void* newMsg);

#define RoutineMetadata_VERSION 9

struct RoutineMetadata;

struct RoutineMetadataVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getPackage)(const struct RoutineMetadata* self, struct Status* status);
	const char* (*getName)(const struct RoutineMetadata* self, struct Status* status);
	const char* (*getEntryPoint)(const struct RoutineMetadata* self, struct Status* status);
	const char* (*getBody)(const struct RoutineMetadata* self, struct Status* status);
	struct MessageMetadata* (*getInputMetadata)(const struct RoutineMetadata* self, struct Status* status);
	struct MessageMetadata* (*getOutputMetadata)(const struct RoutineMetadata* self, struct Status* status);
	struct MessageMetadata* (*getTriggerMetadata)(const struct RoutineMetadata* self, struct Status* status);
	const char* (*getTriggerTable)(const struct RoutineMetadata* self, struct Status* status);
	unsigned (*getTriggerType)(const struct RoutineMetadata* self, struct Status* status);
};

struct RoutineMetadata
{
	void* cloopDummy[1];
	struct RoutineMetadataVTable* vtable;
};

CLOOP_EXTERN_C const char* RoutineMetadata_getPackage(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C const char* RoutineMetadata_getName(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C const char* RoutineMetadata_getEntryPoint(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C const char* RoutineMetadata_getBody(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* RoutineMetadata_getInputMetadata(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* RoutineMetadata_getOutputMetadata(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C struct MessageMetadata* RoutineMetadata_getTriggerMetadata(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C const char* RoutineMetadata_getTriggerTable(const struct RoutineMetadata* self, struct Status* status);
CLOOP_EXTERN_C unsigned RoutineMetadata_getTriggerType(const struct RoutineMetadata* self, struct Status* status);

#define ExternalEngine_VERSION 10

struct ExternalEngine;

struct ExternalEngineVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct ExternalEngine* self);
	int (*release)(struct ExternalEngine* self);
	void (*setOwner)(struct ExternalEngine* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct ExternalEngine* self);
	void (*open)(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, char* charSet, unsigned charSetSize);
	void (*openAttachment)(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context);
	void (*closeAttachment)(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context);
	struct ExternalFunction* (*makeFunction)(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
	struct ExternalProcedure* (*makeProcedure)(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
	struct ExternalTrigger* (*makeTrigger)(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* fieldsBuilder);
};

struct ExternalEngine
{
	void* cloopDummy[1];
	struct ExternalEngineVTable* vtable;
};

CLOOP_EXTERN_C void ExternalEngine_addRef(struct ExternalEngine* self);
CLOOP_EXTERN_C int ExternalEngine_release(struct ExternalEngine* self);
CLOOP_EXTERN_C void ExternalEngine_setOwner(struct ExternalEngine* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* ExternalEngine_getOwner(struct ExternalEngine* self);
CLOOP_EXTERN_C void ExternalEngine_open(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, char* charSet, unsigned charSetSize);
CLOOP_EXTERN_C void ExternalEngine_openAttachment(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context);
CLOOP_EXTERN_C void ExternalEngine_closeAttachment(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context);
CLOOP_EXTERN_C struct ExternalFunction* ExternalEngine_makeFunction(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
CLOOP_EXTERN_C struct ExternalProcedure* ExternalEngine_makeProcedure(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
CLOOP_EXTERN_C struct ExternalTrigger* ExternalEngine_makeTrigger(struct ExternalEngine* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* fieldsBuilder);

#define Timer_VERSION 3

struct Timer;

struct TimerVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct Timer* self);
	int (*release)(struct Timer* self);
	void (*handler)(struct Timer* self);
};

struct Timer
{
	void* cloopDummy[1];
	struct TimerVTable* vtable;
};

CLOOP_EXTERN_C void Timer_addRef(struct Timer* self);
CLOOP_EXTERN_C int Timer_release(struct Timer* self);
CLOOP_EXTERN_C void Timer_handler(struct Timer* self);

#define TimerControl_VERSION 2

struct TimerControl;

struct TimerControlVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*start)(struct TimerControl* self, struct Status* status, struct Timer* timer, ISC_UINT64 microSeconds);
	void (*stop)(struct TimerControl* self, struct Status* status, struct Timer* timer);
};

struct TimerControl
{
	void* cloopDummy[1];
	struct TimerControlVTable* vtable;
};

CLOOP_EXTERN_C void TimerControl_start(struct TimerControl* self, struct Status* status, struct Timer* timer, ISC_UINT64 microSeconds);
CLOOP_EXTERN_C void TimerControl_stop(struct TimerControl* self, struct Status* status, struct Timer* timer);

#define VersionCallback_VERSION 1

struct VersionCallback;

struct VersionCallbackVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*callback)(struct VersionCallback* self, struct Status* status, const char* text);
};

struct VersionCallback
{
	void* cloopDummy[1];
	struct VersionCallbackVTable* vtable;
};

CLOOP_EXTERN_C void VersionCallback_callback(struct VersionCallback* self, struct Status* status, const char* text);

#define Util_VERSION 9

struct Util;

struct UtilVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*getFbVersion)(struct Util* self, struct Status* status, struct Attachment* att, struct VersionCallback* callback);
	void (*loadBlob)(struct Util* self, struct Status* status, ISC_QUAD* blobId, struct Attachment* att, struct Transaction* tra, const char* file, FB_BOOLEAN txt);
	void (*dumpBlob)(struct Util* self, struct Status* status, ISC_QUAD* blobId, struct Attachment* att, struct Transaction* tra, const char* file, FB_BOOLEAN txt);
	void (*getPerfCounters)(struct Util* self, struct Status* status, struct Attachment* att, const char* countersSet, ISC_INT64* counters);
	struct Attachment* (*executeCreateDatabase)(struct Util* self, struct Status* status, unsigned stmtLength, const char* creatDBstatement, unsigned dialect, FB_BOOLEAN* stmtIsCreateDb);
	void (*decodeDate)(struct Util* self, ISC_DATE date, unsigned* year, unsigned* month, unsigned* day);
	void (*decodeTime)(struct Util* self, ISC_TIME time, unsigned* hours, unsigned* minutes, unsigned* seconds, unsigned* fractions);
	ISC_DATE (*encodeDate)(struct Util* self, unsigned year, unsigned month, unsigned day);
	ISC_TIME (*encodeTime)(struct Util* self, unsigned hours, unsigned minutes, unsigned seconds, unsigned fractions);
};

struct Util
{
	void* cloopDummy[1];
	struct UtilVTable* vtable;
};

CLOOP_EXTERN_C void Util_getFbVersion(struct Util* self, struct Status* status, struct Attachment* att, struct VersionCallback* callback);
CLOOP_EXTERN_C void Util_loadBlob(struct Util* self, struct Status* status, ISC_QUAD* blobId, struct Attachment* att, struct Transaction* tra, const char* file, FB_BOOLEAN txt);
CLOOP_EXTERN_C void Util_dumpBlob(struct Util* self, struct Status* status, ISC_QUAD* blobId, struct Attachment* att, struct Transaction* tra, const char* file, FB_BOOLEAN txt);
CLOOP_EXTERN_C void Util_getPerfCounters(struct Util* self, struct Status* status, struct Attachment* att, const char* countersSet, ISC_INT64* counters);
CLOOP_EXTERN_C struct Attachment* Util_executeCreateDatabase(struct Util* self, struct Status* status, unsigned stmtLength, const char* creatDBstatement, unsigned dialect, FB_BOOLEAN* stmtIsCreateDb);
CLOOP_EXTERN_C void Util_decodeDate(struct Util* self, ISC_DATE date, unsigned* year, unsigned* month, unsigned* day);
CLOOP_EXTERN_C void Util_decodeTime(struct Util* self, ISC_TIME time, unsigned* hours, unsigned* minutes, unsigned* seconds, unsigned* fractions);
CLOOP_EXTERN_C ISC_DATE Util_encodeDate(struct Util* self, unsigned year, unsigned month, unsigned day);
CLOOP_EXTERN_C ISC_TIME Util_encodeTime(struct Util* self, unsigned hours, unsigned minutes, unsigned seconds, unsigned fractions);

#define TraceConnection_VERSION 9

#define TraceConnection_KIND_DATABASE ((unsigned) (1))
#define TraceConnection_KIND_SERVICE ((unsigned) (2))

struct TraceConnection;

struct TraceConnectionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	unsigned (*getKind)(struct TraceConnection* self);
	int (*getProcessID)(struct TraceConnection* self);
	const char* (*getUserName)(struct TraceConnection* self);
	const char* (*getRoleName)(struct TraceConnection* self);
	const char* (*getCharSet)(struct TraceConnection* self);
	const char* (*getRemoteProtocol)(struct TraceConnection* self);
	const char* (*getRemoteAddress)(struct TraceConnection* self);
	int (*getRemoteProcessID)(struct TraceConnection* self);
	const char* (*getRemoteProcessName)(struct TraceConnection* self);
};

struct TraceConnection
{
	void* cloopDummy[1];
	struct TraceConnectionVTable* vtable;
};

CLOOP_EXTERN_C unsigned TraceConnection_getKind(struct TraceConnection* self);
CLOOP_EXTERN_C int TraceConnection_getProcessID(struct TraceConnection* self);
CLOOP_EXTERN_C const char* TraceConnection_getUserName(struct TraceConnection* self);
CLOOP_EXTERN_C const char* TraceConnection_getRoleName(struct TraceConnection* self);
CLOOP_EXTERN_C const char* TraceConnection_getCharSet(struct TraceConnection* self);
CLOOP_EXTERN_C const char* TraceConnection_getRemoteProtocol(struct TraceConnection* self);
CLOOP_EXTERN_C const char* TraceConnection_getRemoteAddress(struct TraceConnection* self);
CLOOP_EXTERN_C int TraceConnection_getRemoteProcessID(struct TraceConnection* self);
CLOOP_EXTERN_C const char* TraceConnection_getRemoteProcessName(struct TraceConnection* self);

#define TraceDatabaseConnection_VERSION 11

struct TraceDatabaseConnection;

struct TraceDatabaseConnectionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	unsigned (*getKind)(struct TraceDatabaseConnection* self);
	int (*getProcessID)(struct TraceDatabaseConnection* self);
	const char* (*getUserName)(struct TraceDatabaseConnection* self);
	const char* (*getRoleName)(struct TraceDatabaseConnection* self);
	const char* (*getCharSet)(struct TraceDatabaseConnection* self);
	const char* (*getRemoteProtocol)(struct TraceDatabaseConnection* self);
	const char* (*getRemoteAddress)(struct TraceDatabaseConnection* self);
	int (*getRemoteProcessID)(struct TraceDatabaseConnection* self);
	const char* (*getRemoteProcessName)(struct TraceDatabaseConnection* self);
	int (*getConnectionID)(struct TraceDatabaseConnection* self);
	const char* (*getDatabaseName)(struct TraceDatabaseConnection* self);
};

struct TraceDatabaseConnection
{
	void* cloopDummy[1];
	struct TraceDatabaseConnectionVTable* vtable;
};

CLOOP_EXTERN_C unsigned TraceDatabaseConnection_getKind(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C int TraceDatabaseConnection_getProcessID(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getUserName(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getRoleName(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getCharSet(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getRemoteProtocol(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getRemoteAddress(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C int TraceDatabaseConnection_getRemoteProcessID(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getRemoteProcessName(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C int TraceDatabaseConnection_getConnectionID(struct TraceDatabaseConnection* self);
CLOOP_EXTERN_C const char* TraceDatabaseConnection_getDatabaseName(struct TraceDatabaseConnection* self);

#define TraceTransaction_VERSION 5

#define TraceTransaction_ISOLATION_CONSISTENCY ((unsigned) (1))
#define TraceTransaction_ISOLATION_CONCURRENCY ((unsigned) (2))
#define TraceTransaction_ISOLATION_READ_COMMITTED_RECVER ((unsigned) (3))
#define TraceTransaction_ISOLATION_READ_COMMITTED_NORECVER ((unsigned) (4))

struct TraceTransaction;

struct TraceTransactionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	unsigned (*getTransactionID)(struct TraceTransaction* self);
	FB_BOOLEAN (*getReadOnly)(struct TraceTransaction* self);
	int (*getWait)(struct TraceTransaction* self);
	unsigned (*getIsolation)(struct TraceTransaction* self);
	struct PerformanceInfo* (*getPerf)(struct TraceTransaction* self);
};

struct TraceTransaction
{
	void* cloopDummy[1];
	struct TraceTransactionVTable* vtable;
};

CLOOP_EXTERN_C unsigned TraceTransaction_getTransactionID(struct TraceTransaction* self);
CLOOP_EXTERN_C FB_BOOLEAN TraceTransaction_getReadOnly(struct TraceTransaction* self);
CLOOP_EXTERN_C int TraceTransaction_getWait(struct TraceTransaction* self);
CLOOP_EXTERN_C unsigned TraceTransaction_getIsolation(struct TraceTransaction* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceTransaction_getPerf(struct TraceTransaction* self);

#define TraceParams_VERSION 2

struct TraceParams;

struct TraceParamsVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	unsigned (*getCount)(struct TraceParams* self);
	const struct dsc* (*getParam)(struct TraceParams* self, unsigned idx);
};

struct TraceParams
{
	void* cloopDummy[1];
	struct TraceParamsVTable* vtable;
};

CLOOP_EXTERN_C unsigned TraceParams_getCount(struct TraceParams* self);
CLOOP_EXTERN_C const struct dsc* TraceParams_getParam(struct TraceParams* self, unsigned idx);

#define TraceStatement_VERSION 2

struct TraceStatement;

struct TraceStatementVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*getStmtID)(struct TraceStatement* self);
	struct PerformanceInfo* (*getPerf)(struct TraceStatement* self);
};

struct TraceStatement
{
	void* cloopDummy[1];
	struct TraceStatementVTable* vtable;
};

CLOOP_EXTERN_C int TraceStatement_getStmtID(struct TraceStatement* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceStatement_getPerf(struct TraceStatement* self);

#define TraceSQLStatement_VERSION 7

struct TraceSQLStatement;

struct TraceSQLStatementVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*getStmtID)(struct TraceSQLStatement* self);
	struct PerformanceInfo* (*getPerf)(struct TraceSQLStatement* self);
	const char* (*getText)(struct TraceSQLStatement* self);
	const char* (*getPlan)(struct TraceSQLStatement* self);
	struct TraceParams* (*getInputs)(struct TraceSQLStatement* self);
	const char* (*getTextUTF8)(struct TraceSQLStatement* self);
	const char* (*getExplainedPlan)(struct TraceSQLStatement* self);
};

struct TraceSQLStatement
{
	void* cloopDummy[1];
	struct TraceSQLStatementVTable* vtable;
};

CLOOP_EXTERN_C int TraceSQLStatement_getStmtID(struct TraceSQLStatement* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceSQLStatement_getPerf(struct TraceSQLStatement* self);
CLOOP_EXTERN_C const char* TraceSQLStatement_getText(struct TraceSQLStatement* self);
CLOOP_EXTERN_C const char* TraceSQLStatement_getPlan(struct TraceSQLStatement* self);
CLOOP_EXTERN_C struct TraceParams* TraceSQLStatement_getInputs(struct TraceSQLStatement* self);
CLOOP_EXTERN_C const char* TraceSQLStatement_getTextUTF8(struct TraceSQLStatement* self);
CLOOP_EXTERN_C const char* TraceSQLStatement_getExplainedPlan(struct TraceSQLStatement* self);

#define TraceBLRStatement_VERSION 5

struct TraceBLRStatement;

struct TraceBLRStatementVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	int (*getStmtID)(struct TraceBLRStatement* self);
	struct PerformanceInfo* (*getPerf)(struct TraceBLRStatement* self);
	const unsigned char* (*getData)(struct TraceBLRStatement* self);
	unsigned (*getDataLength)(struct TraceBLRStatement* self);
	const char* (*getText)(struct TraceBLRStatement* self);
};

struct TraceBLRStatement
{
	void* cloopDummy[1];
	struct TraceBLRStatementVTable* vtable;
};

CLOOP_EXTERN_C int TraceBLRStatement_getStmtID(struct TraceBLRStatement* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceBLRStatement_getPerf(struct TraceBLRStatement* self);
CLOOP_EXTERN_C const unsigned char* TraceBLRStatement_getData(struct TraceBLRStatement* self);
CLOOP_EXTERN_C unsigned TraceBLRStatement_getDataLength(struct TraceBLRStatement* self);
CLOOP_EXTERN_C const char* TraceBLRStatement_getText(struct TraceBLRStatement* self);

#define TraceDYNRequest_VERSION 3

struct TraceDYNRequest;

struct TraceDYNRequestVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const unsigned char* (*getData)(struct TraceDYNRequest* self);
	unsigned (*getDataLength)(struct TraceDYNRequest* self);
	const char* (*getText)(struct TraceDYNRequest* self);
};

struct TraceDYNRequest
{
	void* cloopDummy[1];
	struct TraceDYNRequestVTable* vtable;
};

CLOOP_EXTERN_C const unsigned char* TraceDYNRequest_getData(struct TraceDYNRequest* self);
CLOOP_EXTERN_C unsigned TraceDYNRequest_getDataLength(struct TraceDYNRequest* self);
CLOOP_EXTERN_C const char* TraceDYNRequest_getText(struct TraceDYNRequest* self);

#define TraceContextVariable_VERSION 3

struct TraceContextVariable;

struct TraceContextVariableVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getNameSpace)(struct TraceContextVariable* self);
	const char* (*getVarName)(struct TraceContextVariable* self);
	const char* (*getVarValue)(struct TraceContextVariable* self);
};

struct TraceContextVariable
{
	void* cloopDummy[1];
	struct TraceContextVariableVTable* vtable;
};

CLOOP_EXTERN_C const char* TraceContextVariable_getNameSpace(struct TraceContextVariable* self);
CLOOP_EXTERN_C const char* TraceContextVariable_getVarName(struct TraceContextVariable* self);
CLOOP_EXTERN_C const char* TraceContextVariable_getVarValue(struct TraceContextVariable* self);

#define TraceProcedure_VERSION 3

struct TraceProcedure;

struct TraceProcedureVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getProcName)(struct TraceProcedure* self);
	struct TraceParams* (*getInputs)(struct TraceProcedure* self);
	struct PerformanceInfo* (*getPerf)(struct TraceProcedure* self);
};

struct TraceProcedure
{
	void* cloopDummy[1];
	struct TraceProcedureVTable* vtable;
};

CLOOP_EXTERN_C const char* TraceProcedure_getProcName(struct TraceProcedure* self);
CLOOP_EXTERN_C struct TraceParams* TraceProcedure_getInputs(struct TraceProcedure* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceProcedure_getPerf(struct TraceProcedure* self);

#define TraceFunction_VERSION 4

struct TraceFunction;

struct TraceFunctionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getFuncName)(struct TraceFunction* self);
	struct TraceParams* (*getInputs)(struct TraceFunction* self);
	struct TraceParams* (*getResult)(struct TraceFunction* self);
	struct PerformanceInfo* (*getPerf)(struct TraceFunction* self);
};

struct TraceFunction
{
	void* cloopDummy[1];
	struct TraceFunctionVTable* vtable;
};

CLOOP_EXTERN_C const char* TraceFunction_getFuncName(struct TraceFunction* self);
CLOOP_EXTERN_C struct TraceParams* TraceFunction_getInputs(struct TraceFunction* self);
CLOOP_EXTERN_C struct TraceParams* TraceFunction_getResult(struct TraceFunction* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceFunction_getPerf(struct TraceFunction* self);

#define TraceTrigger_VERSION 5

#define TraceTrigger_TYPE_ALL ((unsigned) (0))
#define TraceTrigger_TYPE_BEFORE ((unsigned) (1))
#define TraceTrigger_TYPE_AFTER ((unsigned) (2))

struct TraceTrigger;

struct TraceTriggerVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getTriggerName)(struct TraceTrigger* self);
	const char* (*getRelationName)(struct TraceTrigger* self);
	int (*getAction)(struct TraceTrigger* self);
	int (*getWhich)(struct TraceTrigger* self);
	struct PerformanceInfo* (*getPerf)(struct TraceTrigger* self);
};

struct TraceTrigger
{
	void* cloopDummy[1];
	struct TraceTriggerVTable* vtable;
};

CLOOP_EXTERN_C const char* TraceTrigger_getTriggerName(struct TraceTrigger* self);
CLOOP_EXTERN_C const char* TraceTrigger_getRelationName(struct TraceTrigger* self);
CLOOP_EXTERN_C int TraceTrigger_getAction(struct TraceTrigger* self);
CLOOP_EXTERN_C int TraceTrigger_getWhich(struct TraceTrigger* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceTrigger_getPerf(struct TraceTrigger* self);

#define TraceServiceConnection_VERSION 12

struct TraceServiceConnection;

struct TraceServiceConnectionVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	unsigned (*getKind)(struct TraceServiceConnection* self);
	int (*getProcessID)(struct TraceServiceConnection* self);
	const char* (*getUserName)(struct TraceServiceConnection* self);
	const char* (*getRoleName)(struct TraceServiceConnection* self);
	const char* (*getCharSet)(struct TraceServiceConnection* self);
	const char* (*getRemoteProtocol)(struct TraceServiceConnection* self);
	const char* (*getRemoteAddress)(struct TraceServiceConnection* self);
	int (*getRemoteProcessID)(struct TraceServiceConnection* self);
	const char* (*getRemoteProcessName)(struct TraceServiceConnection* self);
	void* (*getServiceID)(struct TraceServiceConnection* self);
	const char* (*getServiceMgr)(struct TraceServiceConnection* self);
	const char* (*getServiceName)(struct TraceServiceConnection* self);
};

struct TraceServiceConnection
{
	void* cloopDummy[1];
	struct TraceServiceConnectionVTable* vtable;
};

CLOOP_EXTERN_C unsigned TraceServiceConnection_getKind(struct TraceServiceConnection* self);
CLOOP_EXTERN_C int TraceServiceConnection_getProcessID(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getUserName(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getRoleName(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getCharSet(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getRemoteProtocol(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getRemoteAddress(struct TraceServiceConnection* self);
CLOOP_EXTERN_C int TraceServiceConnection_getRemoteProcessID(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getRemoteProcessName(struct TraceServiceConnection* self);
CLOOP_EXTERN_C void* TraceServiceConnection_getServiceID(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getServiceMgr(struct TraceServiceConnection* self);
CLOOP_EXTERN_C const char* TraceServiceConnection_getServiceName(struct TraceServiceConnection* self);

#define TraceStatusVector_VERSION 4

struct TraceStatusVector;

struct TraceStatusVectorVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	FB_BOOLEAN (*hasError)(struct TraceStatusVector* self);
	FB_BOOLEAN (*hasWarning)(struct TraceStatusVector* self);
	const intptr_t* (*getStatus)(struct TraceStatusVector* self);
	const char* (*getText)(struct TraceStatusVector* self);
};

struct TraceStatusVector
{
	void* cloopDummy[1];
	struct TraceStatusVectorVTable* vtable;
};

CLOOP_EXTERN_C FB_BOOLEAN TraceStatusVector_hasError(struct TraceStatusVector* self);
CLOOP_EXTERN_C FB_BOOLEAN TraceStatusVector_hasWarning(struct TraceStatusVector* self);
CLOOP_EXTERN_C const intptr_t* TraceStatusVector_getStatus(struct TraceStatusVector* self);
CLOOP_EXTERN_C const char* TraceStatusVector_getText(struct TraceStatusVector* self);

#define TraceSweepInfo_VERSION 5

struct TraceSweepInfo;

struct TraceSweepInfoVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	ISC_UINT64 (*getOIT)(struct TraceSweepInfo* self);
	ISC_UINT64 (*getOST)(struct TraceSweepInfo* self);
	ISC_UINT64 (*getOAT)(struct TraceSweepInfo* self);
	ISC_UINT64 (*getNext)(struct TraceSweepInfo* self);
	struct PerformanceInfo* (*getPerf)(struct TraceSweepInfo* self);
};

struct TraceSweepInfo
{
	void* cloopDummy[1];
	struct TraceSweepInfoVTable* vtable;
};

CLOOP_EXTERN_C ISC_UINT64 TraceSweepInfo_getOIT(struct TraceSweepInfo* self);
CLOOP_EXTERN_C ISC_UINT64 TraceSweepInfo_getOST(struct TraceSweepInfo* self);
CLOOP_EXTERN_C ISC_UINT64 TraceSweepInfo_getOAT(struct TraceSweepInfo* self);
CLOOP_EXTERN_C ISC_UINT64 TraceSweepInfo_getNext(struct TraceSweepInfo* self);
CLOOP_EXTERN_C struct PerformanceInfo* TraceSweepInfo_getPerf(struct TraceSweepInfo* self);

#define TraceLogWriter_VERSION 3

struct TraceLogWriter;

struct TraceLogWriterVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct TraceLogWriter* self);
	int (*release)(struct TraceLogWriter* self);
	unsigned (*write)(struct TraceLogWriter* self, const void* buf, unsigned size);
};

struct TraceLogWriter
{
	void* cloopDummy[1];
	struct TraceLogWriterVTable* vtable;
};

CLOOP_EXTERN_C void TraceLogWriter_addRef(struct TraceLogWriter* self);
CLOOP_EXTERN_C int TraceLogWriter_release(struct TraceLogWriter* self);
CLOOP_EXTERN_C unsigned TraceLogWriter_write(struct TraceLogWriter* self, const void* buf, unsigned size);

#define TraceInitInfo_VERSION 7

struct TraceInitInfo;

struct TraceInitInfoVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	const char* (*getConfigText)(struct TraceInitInfo* self);
	int (*getTraceSessionID)(struct TraceInitInfo* self);
	const char* (*getTraceSessionName)(struct TraceInitInfo* self);
	const char* (*getFirebirdRootDirectory)(struct TraceInitInfo* self);
	const char* (*getDatabaseName)(struct TraceInitInfo* self);
	struct TraceDatabaseConnection* (*getConnection)(struct TraceInitInfo* self);
	struct TraceLogWriter* (*getLogWriter)(struct TraceInitInfo* self);
};

struct TraceInitInfo
{
	void* cloopDummy[1];
	struct TraceInitInfoVTable* vtable;
};

CLOOP_EXTERN_C const char* TraceInitInfo_getConfigText(struct TraceInitInfo* self);
CLOOP_EXTERN_C int TraceInitInfo_getTraceSessionID(struct TraceInitInfo* self);
CLOOP_EXTERN_C const char* TraceInitInfo_getTraceSessionName(struct TraceInitInfo* self);
CLOOP_EXTERN_C const char* TraceInitInfo_getFirebirdRootDirectory(struct TraceInitInfo* self);
CLOOP_EXTERN_C const char* TraceInitInfo_getDatabaseName(struct TraceInitInfo* self);
CLOOP_EXTERN_C struct TraceDatabaseConnection* TraceInitInfo_getConnection(struct TraceInitInfo* self);
CLOOP_EXTERN_C struct TraceLogWriter* TraceInitInfo_getLogWriter(struct TraceInitInfo* self);

#define TracePlugin_VERSION 23

#define TracePlugin_RESULT_SUCCESS ((unsigned) (0))
#define TracePlugin_RESULT_FAILED ((unsigned) (1))
#define TracePlugin_RESULT_UNAUTHORIZED ((unsigned) (2))
#define TracePlugin_SWEEP_STATE_STARTED ((unsigned) (1))
#define TracePlugin_SWEEP_STATE_FINISHED ((unsigned) (2))
#define TracePlugin_SWEEP_STATE_FAILED ((unsigned) (3))
#define TracePlugin_SWEEP_STATE_PROGRESS ((unsigned) (4))

struct TracePlugin;

struct TracePluginVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct TracePlugin* self);
	int (*release)(struct TracePlugin* self);
	const char* (*trace_get_error)(struct TracePlugin* self);
	FB_BOOLEAN (*trace_attach)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, FB_BOOLEAN create_db, unsigned att_result);
	FB_BOOLEAN (*trace_detach)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, FB_BOOLEAN drop_db);
	FB_BOOLEAN (*trace_transaction_start)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, unsigned tpb_length, const unsigned char* tpb, unsigned tra_result);
	FB_BOOLEAN (*trace_transaction_end)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, FB_BOOLEAN commit, FB_BOOLEAN retain_context, unsigned tra_result);
	FB_BOOLEAN (*trace_proc_execute)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceProcedure* procedure, FB_BOOLEAN started, unsigned proc_result);
	FB_BOOLEAN (*trace_trigger_execute)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceTrigger* trigger, FB_BOOLEAN started, unsigned trig_result);
	FB_BOOLEAN (*trace_set_context)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceContextVariable* variable);
	FB_BOOLEAN (*trace_dsql_prepare)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceSQLStatement* statement, ISC_INT64 time_millis, unsigned req_result);
	FB_BOOLEAN (*trace_dsql_free)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceSQLStatement* statement, unsigned option);
	FB_BOOLEAN (*trace_dsql_execute)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceSQLStatement* statement, FB_BOOLEAN started, unsigned req_result);
	FB_BOOLEAN (*trace_blr_compile)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceBLRStatement* statement, ISC_INT64 time_millis, unsigned req_result);
	FB_BOOLEAN (*trace_blr_execute)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceBLRStatement* statement, unsigned req_result);
	FB_BOOLEAN (*trace_dyn_execute)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceDYNRequest* request, ISC_INT64 time_millis, unsigned req_result);
	FB_BOOLEAN (*trace_service_attach)(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned att_result);
	FB_BOOLEAN (*trace_service_start)(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned switches_length, const char* switches, unsigned start_result);
	FB_BOOLEAN (*trace_service_query)(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned send_item_length, const unsigned char* send_items, unsigned recv_item_length, const unsigned char* recv_items, unsigned query_result);
	FB_BOOLEAN (*trace_service_detach)(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned detach_result);
	FB_BOOLEAN (*trace_event_error)(struct TracePlugin* self, struct TraceConnection* connection, struct TraceStatusVector* status, const char* function);
	FB_BOOLEAN (*trace_event_sweep)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceSweepInfo* sweep, unsigned sweep_state);
	FB_BOOLEAN (*trace_func_execute)(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceFunction* function, FB_BOOLEAN started, unsigned func_result);
};

struct TracePlugin
{
	void* cloopDummy[1];
	struct TracePluginVTable* vtable;
};

CLOOP_EXTERN_C void TracePlugin_addRef(struct TracePlugin* self);
CLOOP_EXTERN_C int TracePlugin_release(struct TracePlugin* self);
CLOOP_EXTERN_C const char* TracePlugin_trace_get_error(struct TracePlugin* self);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_attach(struct TracePlugin* self, struct TraceDatabaseConnection* connection, FB_BOOLEAN create_db, unsigned att_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_detach(struct TracePlugin* self, struct TraceDatabaseConnection* connection, FB_BOOLEAN drop_db);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_transaction_start(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, unsigned tpb_length, const unsigned char* tpb, unsigned tra_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_transaction_end(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, FB_BOOLEAN commit, FB_BOOLEAN retain_context, unsigned tra_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_proc_execute(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceProcedure* procedure, FB_BOOLEAN started, unsigned proc_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_trigger_execute(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceTrigger* trigger, FB_BOOLEAN started, unsigned trig_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_set_context(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceContextVariable* variable);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_dsql_prepare(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceSQLStatement* statement, ISC_INT64 time_millis, unsigned req_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_dsql_free(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceSQLStatement* statement, unsigned option);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_dsql_execute(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceSQLStatement* statement, FB_BOOLEAN started, unsigned req_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_blr_compile(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceBLRStatement* statement, ISC_INT64 time_millis, unsigned req_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_blr_execute(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceBLRStatement* statement, unsigned req_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_dyn_execute(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceDYNRequest* request, ISC_INT64 time_millis, unsigned req_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_service_attach(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned att_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_service_start(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned switches_length, const char* switches, unsigned start_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_service_query(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned send_item_length, const unsigned char* send_items, unsigned recv_item_length, const unsigned char* recv_items, unsigned query_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_service_detach(struct TracePlugin* self, struct TraceServiceConnection* service, unsigned detach_result);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_event_error(struct TracePlugin* self, struct TraceConnection* connection, struct TraceStatusVector* status, const char* function);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_event_sweep(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceSweepInfo* sweep, unsigned sweep_state);
CLOOP_EXTERN_C FB_BOOLEAN TracePlugin_trace_func_execute(struct TracePlugin* self, struct TraceDatabaseConnection* connection, struct TraceTransaction* transaction, struct TraceFunction* function, FB_BOOLEAN started, unsigned func_result);

#define TraceFactory_VERSION 6

#define TraceFactory_TRACE_EVENT_ATTACH ((unsigned) (0))
#define TraceFactory_TRACE_EVENT_DETACH ((unsigned) (1))
#define TraceFactory_TRACE_EVENT_TRANSACTION_START ((unsigned) (2))
#define TraceFactory_TRACE_EVENT_TRANSACTION_END ((unsigned) (3))
#define TraceFactory_TRACE_EVENT_SET_CONTEXT ((unsigned) (4))
#define TraceFactory_TRACE_EVENT_PROC_EXECUTE ((unsigned) (5))
#define TraceFactory_TRACE_EVENT_TRIGGER_EXECUTE ((unsigned) (6))
#define TraceFactory_TRACE_EVENT_DSQL_PREPARE ((unsigned) (7))
#define TraceFactory_TRACE_EVENT_DSQL_FREE ((unsigned) (8))
#define TraceFactory_TRACE_EVENT_DSQL_EXECUTE ((unsigned) (9))
#define TraceFactory_TRACE_EVENT_BLR_COMPILE ((unsigned) (10))
#define TraceFactory_TRACE_EVENT_BLR_EXECUTE ((unsigned) (11))
#define TraceFactory_TRACE_EVENT_DYN_EXECUTE ((unsigned) (12))
#define TraceFactory_TRACE_EVENT_SERVICE_ATTACH ((unsigned) (13))
#define TraceFactory_TRACE_EVENT_SERVICE_START ((unsigned) (14))
#define TraceFactory_TRACE_EVENT_SERVICE_QUERY ((unsigned) (15))
#define TraceFactory_TRACE_EVENT_SERVICE_DETACH ((unsigned) (16))
#define TraceFactory_TRACE_EVENT_ERROR ((unsigned) (17))
#define TraceFactory_TRACE_EVENT_SWEEP ((unsigned) (18))
#define TraceFactory_TRACE_EVENT_FUNC_EXECUTE ((unsigned) (19))
#define TraceFactory_TRACE_EVENT_MAX ((unsigned) (20))

struct TraceFactory;

struct TraceFactoryVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*addRef)(struct TraceFactory* self);
	int (*release)(struct TraceFactory* self);
	void (*setOwner)(struct TraceFactory* self, struct ReferenceCounted* r);
	struct ReferenceCounted* (*getOwner)(struct TraceFactory* self);
	ISC_UINT64 (*trace_needs)(struct TraceFactory* self);
	struct TracePlugin* (*trace_create)(struct TraceFactory* self, struct Status* status, struct TraceInitInfo* init_info);
};

struct TraceFactory
{
	void* cloopDummy[1];
	struct TraceFactoryVTable* vtable;
};

CLOOP_EXTERN_C void TraceFactory_addRef(struct TraceFactory* self);
CLOOP_EXTERN_C int TraceFactory_release(struct TraceFactory* self);
CLOOP_EXTERN_C void TraceFactory_setOwner(struct TraceFactory* self, struct ReferenceCounted* r);
CLOOP_EXTERN_C struct ReferenceCounted* TraceFactory_getOwner(struct TraceFactory* self);
CLOOP_EXTERN_C ISC_UINT64 TraceFactory_trace_needs(struct TraceFactory* self);
CLOOP_EXTERN_C struct TracePlugin* TraceFactory_trace_create(struct TraceFactory* self, struct Status* status, struct TraceInitInfo* init_info);

#define UdrFunctionFactory_VERSION 3

struct UdrFunctionFactory;

struct UdrFunctionFactoryVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct UdrFunctionFactory* self);
	void (*setup)(struct UdrFunctionFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
	struct ExternalFunction* (*newItem)(struct UdrFunctionFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata);
};

struct UdrFunctionFactory
{
	void* cloopDummy[1];
	struct UdrFunctionFactoryVTable* vtable;
};

CLOOP_EXTERN_C void UdrFunctionFactory_dispose(struct UdrFunctionFactory* self);
CLOOP_EXTERN_C void UdrFunctionFactory_setup(struct UdrFunctionFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
CLOOP_EXTERN_C struct ExternalFunction* UdrFunctionFactory_newItem(struct UdrFunctionFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata);

#define UdrProcedureFactory_VERSION 3

struct UdrProcedureFactory;

struct UdrProcedureFactoryVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct UdrProcedureFactory* self);
	void (*setup)(struct UdrProcedureFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
	struct ExternalProcedure* (*newItem)(struct UdrProcedureFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata);
};

struct UdrProcedureFactory
{
	void* cloopDummy[1];
	struct UdrProcedureFactoryVTable* vtable;
};

CLOOP_EXTERN_C void UdrProcedureFactory_dispose(struct UdrProcedureFactory* self);
CLOOP_EXTERN_C void UdrProcedureFactory_setup(struct UdrProcedureFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* inBuilder, struct MetadataBuilder* outBuilder);
CLOOP_EXTERN_C struct ExternalProcedure* UdrProcedureFactory_newItem(struct UdrProcedureFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata);

#define UdrTriggerFactory_VERSION 3

struct UdrTriggerFactory;

struct UdrTriggerFactoryVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	void (*dispose)(struct UdrTriggerFactory* self);
	void (*setup)(struct UdrTriggerFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* fieldsBuilder);
	struct ExternalTrigger* (*newItem)(struct UdrTriggerFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata);
};

struct UdrTriggerFactory
{
	void* cloopDummy[1];
	struct UdrTriggerFactoryVTable* vtable;
};

CLOOP_EXTERN_C void UdrTriggerFactory_dispose(struct UdrTriggerFactory* self);
CLOOP_EXTERN_C void UdrTriggerFactory_setup(struct UdrTriggerFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata, struct MetadataBuilder* fieldsBuilder);
CLOOP_EXTERN_C struct ExternalTrigger* UdrTriggerFactory_newItem(struct UdrTriggerFactory* self, struct Status* status, struct ExternalContext* context, struct RoutineMetadata* metadata);

#define UdrPlugin_VERSION 4

struct UdrPlugin;

struct UdrPluginVTable
{
	void* cloopDummy[1];
	uintptr_t version;
	struct Master* (*getMaster)(struct UdrPlugin* self);
	void (*registerFunction)(struct UdrPlugin* self, struct Status* status, const char* name, struct UdrFunctionFactory* factory);
	void (*registerProcedure)(struct UdrPlugin* self, struct Status* status, const char* name, struct UdrProcedureFactory* factory);
	void (*registerTrigger)(struct UdrPlugin* self, struct Status* status, const char* name, struct UdrTriggerFactory* factory);
};

struct UdrPlugin
{
	void* cloopDummy[1];
	struct UdrPluginVTable* vtable;
};

CLOOP_EXTERN_C struct Master* UdrPlugin_getMaster(struct UdrPlugin* self);
CLOOP_EXTERN_C void UdrPlugin_registerFunction(struct UdrPlugin* self, struct Status* status, const char* name, struct UdrFunctionFactory* factory);
CLOOP_EXTERN_C void UdrPlugin_registerProcedure(struct UdrPlugin* self, struct Status* status, const char* name, struct UdrProcedureFactory* factory);
CLOOP_EXTERN_C void UdrPlugin_registerTrigger(struct UdrPlugin* self, struct Status* status, const char* name, struct UdrTriggerFactory* factory);


#endif	// FB_C_API_H
